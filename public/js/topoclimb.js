/**
 * TopoclimbCH - Application JavaScript Principale
 * Version 2.0 - Architecture moderne unifiée
 * 
 * Ce fichier remplace et unifie :
 * - /public/js/common.js (ancien)
 * - /public/js/components/common.js (ancien)
 * - Parties de /public/js/app.js
 */

(function(window, document) {
    'use strict';
    
    // Éviter les doubles chargements
    if (window.TopoclimbCH && window.TopoclimbCH.initialized) {
        console.warn('⚠️ TopoclimbCH already loaded, skipping...');
        return;
    }
    
    /**
     * 🚀 Chargement séquentiel des modules core
     */
    async function loadCoreModules() {
        const coreModules = [
            '/js/core/index.js',    // Framework de base
            '/js/core/utils.js',    // Utilitaires
            '/js/core/api.js',      // Client API
            '/js/core/ui.js'        // Composants UI
        ];
        
        for (const module of coreModules) {
            try {\n                await loadScript(module);\n                console.log(`✅ Loaded: ${module}`);\n            } catch (error) {\n                console.error(`❌ Failed to load: ${module}`, error);\n                throw error;\n            }\n        }\n    }\n    \n    /**\n     * 📦 Chargement dynamique de scripts\n     */\n    function loadScript(src) {\n        return new Promise((resolve, reject) => {\n            // Vérifier si le script est déjà chargé\n            if (document.querySelector(`script[src=\"${src}\"]`)) {\n                resolve();\n                return;\n            }\n            \n            const script = document.createElement('script');\n            script.src = src;\n            script.defer = true;\n            \n            script.onload = () => resolve();\n            script.onerror = () => reject(new Error(`Failed to load script: ${src}`));\n            \n            document.head.appendChild(script);\n        });\n    }\n    \n    /**\n     * 🎯 Initialisation de l'application\n     */\n    async function initializeApplication() {\n        try {\n            console.log('🏗️ Initializing TopoclimbCH v2.0...');\n            \n            // 1. Charger les modules core\n            await loadCoreModules();\n            \n            // 2. Attendre que TopoclimbCH soit disponible\n            if (!window.TopoclimbCH) {\n                throw new Error('TopoclimbCH core not loaded');\n            }\n            \n            // 3. Charger les modules requis\n            await TopoclimbCH.modules.loadAll(['utils', 'api', 'ui']);\n            \n            // 4. Configuration de l'application\n            TopoclimbCH.init({\n                debug: window.location.search.includes('debug=1'),\n                apiBaseUrl: window.location.origin,\n                locale: document.documentElement.lang || 'fr-CH'\n            });\n            \n            // 5. Initialiser les fonctionnalités globales\n            initializeGlobalFeatures();\n            \n            // 6. Charger les composants spécifiques à la page\n            await loadPageSpecificComponents();\n            \n            console.log('🎉 TopoclimbCH v2.0 ready!');\n            \n            // Émettre événement de fin d'initialisation\n            TopoclimbCH.events.emit('app:ready');\n            \n        } catch (error) {\n            console.error('🚨 Failed to initialize TopoclimbCH:', error);\n            \n            // Mode dégradé\n            initializeFallbackMode();\n        }\n    }\n    \n    /**\n     * 🌐 Fonctionnalités globales\n     */\n    function initializeGlobalFeatures() {\n        // Auto-init des tooltips Bootstrap\n        if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {\n            const tooltips = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            tooltips.forEach(el => new bootstrap.Tooltip(el));\n        }\n        \n        // Liens externes en nouvelle fenêtre\n        document.querySelectorAll('a[href^=\"http\"]').forEach(link => {\n            if (!link.hostname.includes(window.location.hostname)) {\n                link.target = '_blank';\n                link.rel = 'noopener noreferrer';\n            }\n        });\n        \n        // Gestion des formulaires avec validation\n        document.querySelectorAll('form[data-validate]').forEach(form => {\n            form.addEventListener('submit', (e) => {\n                if (!validateForm(form)) {\n                    e.preventDefault();\n                }\n            });\n        });\n        \n        // Images lazy loading\n        if ('IntersectionObserver' in window) {\n            const imageObserver = new IntersectionObserver((entries) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        const img = entry.target;\n                        img.src = img.dataset.src;\n                        img.classList.remove('lazy');\n                        imageObserver.unobserve(img);\n                    }\n                });\n            });\n            \n            document.querySelectorAll('img[data-src]').forEach(img => {\n                imageObserver.observe(img);\n            });\n        }\n        \n        // Performance monitoring\n        if (TopoclimbCH.debug && 'PerformanceObserver' in window) {\n            const perfObserver = new PerformanceObserver((list) => {\n                list.getEntries().forEach(entry => {\n                    if (entry.duration > 100) {\n                        console.log(`🐌 Slow operation: ${entry.name} (${entry.duration.toFixed(2)}ms)`);\n                    }\n                });\n            });\n            \n            perfObserver.observe({ entryTypes: ['measure', 'navigation'] });\n        }\n    }\n    \n    /**\n     * 📄 Chargement des composants spécifiques à la page\n     */\n    async function loadPageSpecificComponents() {\n        const bodyClass = document.body.className;\n        const components = [];\n        \n        // Détection basée sur les classes CSS du body ou data attributes\n        if (bodyClass.includes('map-page') || document.getElementById('map')) {\n            components.push('/js/components/swiss-map-manager.js');\n            components.push('/js/components/interactive-map-manager.js');\n        }\n        \n        if (bodyClass.includes('geolocation-page') || document.querySelector('[data-geolocation]')) {\n            components.push('/js/utils/coordinates-helper.js');\n            components.push('/js/components/geolocation-manager.js');\n        }\n        \n        if (bodyClass.includes('form-page') || document.querySelector('.site-form')) {\n            components.push('/js/utils/coordinates-helper.js');\n            components.push('/js/components/site-form-manager.js');\n        }\n        \n        if (document.querySelector('[data-lightbox]')) {\n            // Lightbox déjà inclus dans UI\n        }\n        \n        // Charger les composants détectés\n        for (const component of components) {\n            try {\n                await loadScript(component);\n                console.log(`📦 Component loaded: ${component}`);\n            } catch (error) {\n                console.warn(`⚠️ Component failed to load: ${component}`, error);\n            }\n        }\n        \n        // Auto-initialisation des composants\n        autoInitializeComponents();\n    }\n    \n    /**\n     * 🤖 Auto-initialisation des composants\n     */\n    function autoInitializeComponents() {\n        // Map interactive\n        const mapElement = document.getElementById('map');\n        if (mapElement && window.InteractiveMapManager) {\n            const mapManager = new InteractiveMapManager('map');\n            mapManager.init();\n            \n            if (mapManager.loadClimbingData) {\n                mapManager.loadClimbingData().catch(console.error);\n            }\n        }\n        \n        // Geolocation\n        if (document.querySelector('[data-geolocation]') && window.GeolocationManager) {\n            new GeolocationManager();\n        }\n        \n        // Site form\n        if (document.querySelector('.site-form') && window.SiteFormManager) {\n            new SiteFormManager();\n        }\n    }\n    \n    /**\n     * ✅ Validation de formulaire simple\n     */\n    function validateForm(form) {\n        let valid = true;\n        const requiredFields = form.querySelectorAll('[required]');\n        \n        requiredFields.forEach(field => {\n            if (!field.value.trim()) {\n                field.classList.add('is-invalid');\n                valid = false;\n            } else {\n                field.classList.remove('is-invalid');\n            }\n        });\n        \n        return valid;\n    }\n    \n    /**\n     * 🔄 Mode dégradé en cas d'erreur\n     */\n    function initializeFallbackMode() {\n        console.log('🔄 Initializing fallback mode...');\n        \n        // Fonctionnalités de base uniquement\n        window.TopoclimbCH = {\n            version: '2.0.0-fallback',\n            initialized: true,\n            \n            // Utilitaires de base\n            utils: {\n                debounce: function(func, wait) {\n                    let timeout;\n                    return function(...args) {\n                        clearTimeout(timeout);\n                        timeout = setTimeout(() => func.apply(this, args), wait);\n                    };\n                },\n                \n                escapeHtml: function(text) {\n                    const div = document.createElement('div');\n                    div.textContent = text;\n                    return div.innerHTML;\n                }\n            },\n            \n            // Notifications simples\n            showMessage: function(message, type = 'info') {\n                alert(`[${type.toUpperCase()}] ${message}`);\n            }\n        };\n        \n        console.log('✅ Fallback mode ready');\n    }\n    \n    /**\n     * 🚀 Point d'entrée principal\n     */\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializeApplication);\n    } else {\n        initializeApplication();\n    }\n    \n})(window, document);