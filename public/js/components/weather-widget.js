/**
 * WeatherWidget - Widget m√©t√©o pour pages r√©gion
 * Extrait et modularis√© depuis pages/regions/show.js
 */

// Enregistrement du module WeatherWidget
TopoclimbCH.modules.register('weather-widget', ['utils', 'api'], (utils, api) => {
    
    class WeatherWidget {
        constructor(containerId, options = {}) {\n            this.containerId = containerId;\n            this.options = {\n                updateInterval: 300000, // 5 minutes\n                showForecast: true,\n                showClimbingConditions: true,\n                units: 'metric',\n                ...options\n            };\n            \n            this.container = null;\n            this.weatherCache = new Map();\n            this.updateTimer = null;\n            \n            this.coordinates = options.coordinates || null;\n            this.regionData = options.regionData || null;\n        }\n        \n        /**\n         * Initialise le widget m√©t√©o\n         */\n        init() {\n            this.container = document.getElementById(this.containerId);\n            if (!this.container) {\n                console.warn(`Weather widget container #${this.containerId} not found`);\n                return;\n            }\n            \n            if (!this.coordinates && this.regionData) {\n                this.coordinates = {\n                    lat: this.regionData.coordinates_lat,\n                    lng: this.regionData.coordinates_lng\n                };\n            }\n            \n            if (!this.coordinates) {\n                console.warn('No coordinates provided for weather widget');\n                return;\n            }\n            \n            this.createWidget();\n            this.loadWeatherData();\n            this.startAutoUpdate();\n            \n            console.log('üå§Ô∏è WeatherWidget initialized');\n        }\n        \n        /**\n         * Cr√©e la structure HTML du widget\n         */\n        createWidget() {\n            this.container.innerHTML = `\n                <div class=\"weather-widget\">\n                    <div class=\"weather-header\">\n                        <h6 class=\"weather-title\">\n                            <i class=\"fa fa-cloud-sun\"></i>\n                            Conditions m√©t√©o\n                        </h6>\n                        <div class=\"weather-refresh\">\n                            <button id=\"refresh-weather\" class=\"btn btn-sm btn-outline-secondary\">\n                                <i class=\"fa fa-refresh\"></i>\n                            </button>\n                        </div>\n                    </div>\n                    \n                    <div class=\"weather-loading\" id=\"weather-loading\">\n                        <div class=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span class=\"sr-only\">Chargement...</span>\n                        </div>\n                        <span class=\"ms-2\">Chargement m√©t√©o...</span>\n                    </div>\n                    \n                    <div class=\"weather-content\" id=\"weather-content\" style=\"display: none;\">\n                        <div class=\"current-weather\" id=\"current-weather\"></div>\n                        \n                        ${this.options.showForecast ? '<div class=\"weather-forecast\" id=\"weather-forecast\"></div>' : ''}\n                        \n                        ${this.options.showClimbingConditions ? '<div class=\"climbing-conditions\" id=\"climbing-conditions\"></div>' : ''}\n                    </div>\n                    \n                    <div class=\"weather-error\" id=\"weather-error\" style=\"display: none;\">\n                        <div class=\"alert alert-warning\">\n                            <i class=\"fa fa-exclamation-triangle\"></i>\n                            Impossible de charger les donn√©es m√©t√©o\n                        </div>\n                    </div>\n                </div>\n            `;\n            \n            // √âv√©nement de refresh\n            const refreshBtn = this.container.querySelector('#refresh-weather');\n            if (refreshBtn) {\n                refreshBtn.addEventListener('click', () => {\n                    this.loadWeatherData(true);\n                });\n            }\n        }\n        \n        /**\n         * Charge les donn√©es m√©t√©o\n         */\n        async loadWeatherData(forceRefresh = false) {\n            const cacheKey = `${this.coordinates.lat},${this.coordinates.lng}`;\n            \n            // V√©rifier le cache\n            if (!forceRefresh && this.weatherCache.has(cacheKey)) {\n                const cached = this.weatherCache.get(cacheKey);\n                if (Date.now() - cached.timestamp < this.options.updateInterval) {\n                    this.displayWeatherData(cached.data);\n                    return;\n                }\n            }\n            \n            this.showLoading();\n            \n            try {\n                const weatherData = await api.getWeather(\n                    this.coordinates.lat,\n                    this.coordinates.lng\n                );\n                \n                // Mettre en cache\n                this.weatherCache.set(cacheKey, {\n                    data: weatherData,\n                    timestamp: Date.now()\n                });\n                \n                this.displayWeatherData(weatherData);\n                this.hideLoading();\n                \n            } catch (error) {\n                console.error('Weather data loading error:', error);\n                this.showError();\n            }\n        }\n        \n        /**\n         * Affiche les donn√©es m√©t√©o\n         */\n        displayWeatherData(data) {\n            this.displayCurrentWeather(data.current);\n            \n            if (this.options.showForecast && data.forecast) {\n                this.displayForecast(data.forecast);\n            }\n            \n            if (this.options.showClimbingConditions) {\n                this.displayClimbingConditions(data);\n            }\n        }\n        \n        /**\n         * Affiche la m√©t√©o actuelle\n         */\n        displayCurrentWeather(current) {\n            const container = this.container.querySelector('#current-weather');\n            if (!container) return;\n            \n            const temp = Math.round(current.temperature);\n            const feelsLike = Math.round(current.feels_like);\n            const humidity = current.humidity;\n            const windSpeed = Math.round(current.wind_speed * 3.6); // m/s to km/h\n            const windDir = this.getWindDirection(current.wind_direction);\n            \n            container.innerHTML = `\n                <div class=\"current-weather-main\">\n                    <div class=\"weather-icon\">\n                        ${this.getWeatherIcon(current.weather_code)}\n                    </div>\n                    <div class=\"weather-temp\">\n                        <span class=\"temp-main\">${temp}¬∞C</span>\n                        <span class=\"temp-feels\">Ressenti ${feelsLike}¬∞C</span>\n                    </div>\n                    <div class=\"weather-desc\">\n                        ${this.getWeatherDescription(current.weather_code)}\n                    </div>\n                </div>\n                \n                <div class=\"weather-details\">\n                    <div class=\"detail-item\">\n                        <i class=\"fa fa-tint\"></i>\n                        <span class=\"detail-label\">Humidit√©</span>\n                        <span class=\"detail-value\">${humidity}%</span>\n                    </div>\n                    <div class=\"detail-item\">\n                        <i class=\"fa fa-wind\"></i>\n                        <span class=\"detail-label\">Vent</span>\n                        <span class=\"detail-value\">${windSpeed} km/h ${windDir}</span>\n                    </div>\n                    <div class=\"detail-item\">\n                        <i class=\"fa fa-barometer\"></i>\n                        <span class=\"detail-label\">Pression</span>\n                        <span class=\"detail-value\">${current.pressure} hPa</span>\n                    </div>\n                </div>\n            `;\n        }\n        \n        /**\n         * Affiche les pr√©visions\n         */\n        displayForecast(forecast) {\n            const container = this.container.querySelector('#weather-forecast');\n            if (!container || !forecast.length) return;\n            \n            const forecastItems = forecast.slice(0, 5).map(day => `\n                <div class=\"forecast-item\">\n                    <div class=\"forecast-day\">\n                        ${this.formatForecastDay(day.date)}\n                    </div>\n                    <div class=\"forecast-icon\">\n                        ${this.getWeatherIcon(day.weather_code, 'small')}\n                    </div>\n                    <div class=\"forecast-temp\">\n                        <span class=\"temp-max\">${Math.round(day.temp_max)}¬∞</span>\n                        <span class=\"temp-min\">${Math.round(day.temp_min)}¬∞</span>\n                    </div>\n                    <div class=\"forecast-rain\">\n                        ${day.precipitation ? `<i class=\"fa fa-droplet\"></i> ${day.precipitation}mm` : ''}\n                    </div>\n                </div>\n            `).join('');\n            \n            container.innerHTML = `\n                <h6 class=\"forecast-title\">Pr√©visions 5 jours</h6>\n                <div class=\"forecast-grid\">\n                    ${forecastItems}\n                </div>\n            `;\n        }\n        \n        /**\n         * Affiche les conditions d'escalade\n         */\n        displayClimbingConditions(data) {\n            const container = this.container.querySelector('#climbing-conditions');\n            if (!container) return;\n            \n            const conditions = this.evaluateClimbingConditions(data);\n            \n            container.innerHTML = `\n                <h6 class=\"conditions-title\">\n                    <i class=\"fa fa-mountain\"></i>\n                    Conditions d'escalade\n                </h6>\n                \n                <div class=\"conditions-overall\">\n                    <div class=\"condition-score condition-${conditions.overall.level}\">\n                        ${this.getConditionIcon(conditions.overall.level)}\n                        <span class=\"condition-text\">${conditions.overall.text}</span>\n                    </div>\n                </div>\n                \n                <div class=\"conditions-details\">\n                    <div class=\"condition-item\">\n                        <span class=\"condition-label\">Temp√©rature:</span>\n                        <span class=\"condition-value condition-${conditions.temperature.level}\">\n                            ${conditions.temperature.text}\n                        </span>\n                    </div>\n                    <div class=\"condition-item\">\n                        <span class=\"condition-label\">Vent:</span>\n                        <span class=\"condition-value condition-${conditions.wind.level}\">\n                            ${conditions.wind.text}\n                        </span>\n                    </div>\n                    <div class=\"condition-item\">\n                        <span class=\"condition-label\">Pr√©cipitations:</span>\n                        <span class=\"condition-value condition-${conditions.precipitation.level}\">\n                            ${conditions.precipitation.text}\n                        </span>\n                    </div>\n                </div>\n                \n                ${conditions.advice ? `\n                    <div class=\"conditions-advice\">\n                        <i class=\"fa fa-lightbulb\"></i>\n                        <span>${conditions.advice}</span>\n                    </div>\n                ` : ''}\n            `;\n        }\n        \n        /**\n         * √âvalue les conditions d'escalade\n         */\n        evaluateClimbingConditions(data) {\n            const current = data.current;\n            const temp = current.temperature;\n            const windSpeed = current.wind_speed * 3.6; // km/h\n            const precipitation = current.precipitation || 0;\n            \n            // √âvaluation temp√©rature\n            let tempLevel, tempText;\n            if (temp < 5) {\n                tempLevel = 'poor';\n                tempText = 'Tr√®s froid';\n            } else if (temp < 15) {\n                tempLevel = 'fair';\n                tempText = 'Frais';\n            } else if (temp < 25) {\n                tempLevel = 'good';\n                tempText = 'Id√©al';\n            } else if (temp < 30) {\n                tempLevel = 'fair';\n                tempText = 'Chaud';\n            } else {\n                tempLevel = 'poor';\n                tempText = 'Tr√®s chaud';\n            }\n            \n            // √âvaluation vent\n            let windLevel, windText;\n            if (windSpeed < 10) {\n                windLevel = 'good';\n                windText = 'Calme';\n            } else if (windSpeed < 20) {\n                windLevel = 'fair';\n                windText = 'Mod√©r√©';\n            } else if (windSpeed < 30) {\n                windLevel = 'poor';\n                windText = 'Fort';\n            } else {\n                windLevel = 'poor';\n                windText = 'Tr√®s fort';\n            }\n            \n            // √âvaluation pr√©cipitations\n            let precipLevel, precipText;\n            if (precipitation === 0) {\n                precipLevel = 'good';\n                precipText = 'Sec';\n            } else if (precipitation < 2) {\n                precipLevel = 'fair';\n                precipText = 'L√©g√®res';\n            } else {\n                precipLevel = 'poor';\n                precipText = 'Importantes';\n            }\n            \n            // √âvaluation globale\n            const scores = { good: 3, fair: 2, poor: 1 };\n            const avgScore = (scores[tempLevel] + scores[windLevel] + scores[precipLevel]) / 3;\n            \n            let overallLevel, overallText, advice;\n            if (avgScore >= 2.5) {\n                overallLevel = 'good';\n                overallText = 'Excellentes';\n                advice = 'Conditions id√©ales pour l\\'escalade !';\n            } else if (avgScore >= 2) {\n                overallLevel = 'fair';\n                overallText = 'Correctes';\n                advice = 'Escalade possible avec pr√©cautions.';\n            } else {\n                overallLevel = 'poor';\n                overallText = 'Difficiles';\n                advice = 'Escalade d√©conseill√©e. Restez prudents.';\n            }\n            \n            return {\n                overall: { level: overallLevel, text: overallText },\n                temperature: { level: tempLevel, text: tempText },\n                wind: { level: windLevel, text: windText },\n                precipitation: { level: precipLevel, text: precipText },\n                advice\n            };\n        }\n        \n        /**\n         * Retourne l'ic√¥ne m√©t√©o\n         */\n        getWeatherIcon(code, size = 'normal') {\n            const iconMap = {\n                0: '‚òÄÔ∏è',   // Clear sky\n                1: 'üå§Ô∏è',   // Mainly clear\n                2: '‚õÖ',   // Partly cloudy\n                3: '‚òÅÔ∏è',   // Overcast\n                45: 'üå´Ô∏è',  // Fog\n                48: 'üå´Ô∏è',  // Depositing rime fog\n                51: 'üå¶Ô∏è',  // Light drizzle\n                53: 'üåßÔ∏è',  // Moderate drizzle\n                55: 'üåßÔ∏è',  // Dense drizzle\n                61: 'üåßÔ∏è',  // Slight rain\n                63: 'üåßÔ∏è',  // Moderate rain\n                65: 'üåßÔ∏è',  // Heavy rain\n                71: 'üå®Ô∏è',  // Slight snow\n                73: 'üå®Ô∏è',  // Moderate snow\n                75: 'üå®Ô∏è',  // Heavy snow\n                95: '‚õàÔ∏è',  // Thunderstorm\n                96: '‚õàÔ∏è',  // Thunderstorm with hail\n                99: '‚õàÔ∏è'   // Thunderstorm with heavy hail\n            };\n            \n            const icon = iconMap[code] || '‚ùì';\n            const sizeClass = size === 'small' ? 'weather-icon-small' : 'weather-icon-normal';\n            \n            return `<span class=\"${sizeClass}\">${icon}</span>`;\n        }\n        \n        /**\n         * Retourne la description m√©t√©o\n         */\n        getWeatherDescription(code) {\n            const descriptions = {\n                0: 'Ciel d√©gag√©',\n                1: 'Principalement d√©gag√©',\n                2: 'Partiellement nuageux',\n                3: 'Couvert',\n                45: 'Brouillard',\n                48: 'Brouillard givrant',\n                51: 'Bruine l√©g√®re',\n                53: 'Bruine mod√©r√©e',\n                55: 'Bruine dense',\n                61: 'Pluie l√©g√®re',\n                63: 'Pluie mod√©r√©e',\n                65: 'Pluie forte',\n                71: 'Neige l√©g√®re',\n                73: 'Neige mod√©r√©e',\n                75: 'Neige forte',\n                95: 'Orage',\n                96: 'Orage avec gr√™le',\n                99: 'Orage violent'\n            };\n            \n            return descriptions[code] || 'Conditions inconnues';\n        }\n        \n        /**\n         * Convertit la direction du vent\n         */\n        getWindDirection(degrees) {\n            const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n            const index = Math.round(degrees / 45) % 8;\n            return directions[index];\n        }\n        \n        /**\n         * Formate le jour pour les pr√©visions\n         */\n        formatForecastDay(dateString) {\n            const date = new Date(dateString);\n            const today = new Date();\n            const tomorrow = new Date(today);\n            tomorrow.setDate(tomorrow.getDate() + 1);\n            \n            if (date.toDateString() === today.toDateString()) {\n                return 'Aujourd\\'hui';\n            } else if (date.toDateString() === tomorrow.toDateString()) {\n                return 'Demain';\n            } else {\n                return date.toLocaleDateString('fr-FR', { weekday: 'short' });\n            }\n        }\n        \n        /**\n         * Retourne l'ic√¥ne de condition\n         */\n        getConditionIcon(level) {\n            const icons = {\n                good: '‚úÖ',\n                fair: '‚ö†Ô∏è',\n                poor: '‚ùå'\n            };\n            return icons[level] || '‚ùì';\n        }\n        \n        /**\n         * Affiche le loading\n         */\n        showLoading() {\n            const loading = this.container.querySelector('#weather-loading');\n            const content = this.container.querySelector('#weather-content');\n            const error = this.container.querySelector('#weather-error');\n            \n            if (loading) loading.style.display = 'block';\n            if (content) content.style.display = 'none';\n            if (error) error.style.display = 'none';\n        }\n        \n        /**\n         * Masque le loading\n         */\n        hideLoading() {\n            const loading = this.container.querySelector('#weather-loading');\n            const content = this.container.querySelector('#weather-content');\n            \n            if (loading) loading.style.display = 'none';\n            if (content) content.style.display = 'block';\n        }\n        \n        /**\n         * Affiche l'erreur\n         */\n        showError() {\n            const loading = this.container.querySelector('#weather-loading');\n            const content = this.container.querySelector('#weather-content');\n            const error = this.container.querySelector('#weather-error');\n            \n            if (loading) loading.style.display = 'none';\n            if (content) content.style.display = 'none';\n            if (error) error.style.display = 'block';\n        }\n        \n        /**\n         * D√©marre la mise √† jour automatique\n         */\n        startAutoUpdate() {\n            if (this.updateTimer) {\n                clearInterval(this.updateTimer);\n            }\n            \n            this.updateTimer = setInterval(() => {\n                this.loadWeatherData();\n            }, this.options.updateInterval);\n        }\n        \n        /**\n         * Arr√™te la mise √† jour automatique\n         */\n        stopAutoUpdate() {\n            if (this.updateTimer) {\n                clearInterval(this.updateTimer);\n                this.updateTimer = null;\n            }\n        }\n        \n        /**\n         * Nettoyage\n         */\n        destroy() {\n            this.stopAutoUpdate();\n            this.weatherCache.clear();\n            \n            if (this.container) {\n                this.container.innerHTML = '';\n            }\n        }\n    }\n    \n    return WeatherWidget;\n});\n\nconsole.log('üå§Ô∏è WeatherWidget module ready');