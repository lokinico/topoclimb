/**
 * Site Show Page - Version moderne modulaire
 * Remplace l'ancien show.js avec architecture moderne
 */

// Enregistrement du module de page site
TopoclimbCH.modules.register('page-site-show', ['utils', 'api', 'ui'], async (utils, api, ui) => {
    
    class SiteShowPage {
        constructor() {
            this.siteData = window.siteData || null;
            this.siteId = this.extractSiteIdFromUrl();
            this.components = {};
            this.initialized = false;
        }
        
        /**
         * Initialise la page site
         */
        async init() {
            if (this.initialized) {
                console.warn('Site show page already initialized');
                return;
            }
            
            if (!this.siteId) {
                console.error('No site ID found in URL');
                return;
            }
            
            console.log(`üßó Initializing site page: ${this.siteId}`);
            
            try {
                // Charger les donn√©es si pas d√©j√† pr√©sentes
                if (!this.siteData) {
                    await this.loadSiteData();
                }
                
                // Initialiser les composants
                await this.initializeComponents();
                
                // Configuration des fonctionnalit√©s
                this.setupInteractions();
                this.setupAnimations();
                this.setupKeyboardShortcuts();
                
                this.initialized = true;
                console.log('‚úÖ Site show page initialized successfully');
                
            } catch (error) {
                console.error('‚ùå Failed to initialize site page:', error);
                this.initializeFallback();
            }
        }
        
        /**
         * Extrait l'ID du site depuis l'URL
         */
        extractSiteIdFromUrl() {
            const path = window.location.pathname;
            const matches = path.match(/\/sites\/(\d+)/);
            return matches ? parseInt(matches[1]) : null;
        }
        
        /**
         * Charge les donn√©es du site
         */
        async loadSiteData() {
            try {
                this.siteData = await api.getSite(this.siteId);
                console.log('üìä Site data loaded:', this.siteData);
            } catch (error) {
                console.error('Failed to load site data:', error);
                ui.toast.error('Erreur lors du chargement des donn√©es du site');
                throw error;
            }
        }
        
        /**
         * Initialise tous les composants
         */
        async initializeComponents() {
            // 1. Cartes de statistiques
            this.initializeStatCards();
            
            // 2. Cartes des secteurs
            this.initializeSectorCards();
            
            // 3. Carte interactive si pr√©sente
            await this.initializeSiteMap();
            
            // 4. Galerie photos
            this.initializePhotoGallery();
            
            // 5. Widget m√©t√©o local
            await this.initializeLocalWeather();
            
            // 6. Actions rapides
            this.initializeQuickActions();
        }
        
        /**
         * Am√©liore les cartes de statistiques avec animations
         */
        initializeStatCards() {
            const statCards = document.querySelectorAll('.stat-card');
            
            statCards.forEach((card, index) => {
                // Animation d'apparition √©chelonn√©e
                card.style.animationDelay = `${index * 0.1}s`;
                card.classList.add('fade-in-up');
                
                // Effet hover moderne
                this.addHoverEffect(card);
                
                // Animation du nombre
                this.animateStatNumber(card);
                
                // Tooltip informatif
                this.addStatTooltip(card);
            });
            
            console.log(`üìä Enhanced ${statCards.length} stat cards`);
        }
        
        /**
         * Ajoute un effet hover moderne
         */
        addHoverEffect(element) {
            element.addEventListener('mouseenter', () => {
                element.style.transform = 'translateY(-4px) scale(1.02)';\n                element.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.15)';\n                element.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            element.addEventListener('mouseleave', () => {\n                element.style.transform = 'translateY(0) scale(1)';\n                element.style.boxShadow = '';\n            });\n        }\n        \n        /**\n         * Anime les nombres dans les statistiques\n         */\n        animateStatNumber(card) {\n            const numberElement = card.querySelector('.stat-number');\n            if (!numberElement) return;\n            \n            const targetValue = parseInt(numberElement.textContent.replace(/[^0-9]/g, ''));\n            if (isNaN(targetValue)) return;\n            \n            let currentValue = 0;\n            const increment = targetValue / 30; // Animation sur 30 frames\n            const duration = 1000; // 1 seconde\n            const stepTime = duration / 30;\n            \n            const animate = () => {\n                currentValue += increment;\n                if (currentValue >= targetValue) {\n                    numberElement.textContent = targetValue.toString();\n                    return;\n                }\n                \n                numberElement.textContent = Math.floor(currentValue).toString();\n                setTimeout(animate, stepTime);\n            };\n            \n            // D√©marrer l'animation quand l'√©l√©ment devient visible\n            if (utils.isElementVisible(card)) {\n                setTimeout(animate, parseInt(card.style.animationDelay) || 0);\n            } else {\n                const observer = new IntersectionObserver((entries) => {\n                    entries.forEach(entry => {\n                        if (entry.isIntersecting) {\n                            animate();\n                            observer.unobserve(entry.target);\n                        }\n                    });\n                });\n                observer.observe(card);\n            }\n        }\n        \n        /**\n         * Ajoute des tooltips aux statistiques\n         */\n        addStatTooltip(card) {\n            const statType = card.dataset.statType;\n            if (!statType) return;\n            \n            const tooltips = {\n                sectors: 'Nombre total de secteurs d\\'escalade dans ce site',\n                routes: 'Nombre total de voies d\\'escalade tous secteurs confondus',\n                difficulty: 'Gamme de difficult√©s disponibles sur ce site',\n                elevation: 'Altitude approximative du site d\\'escalade'\n            };\n            \n            const tooltip = tooltips[statType];\n            if (tooltip) {\n                card.title = tooltip;\n                card.setAttribute('data-bs-toggle', 'tooltip');\n                card.setAttribute('data-bs-placement', 'top');\n            }\n        }\n        \n        /**\n         * Am√©liore les cartes des secteurs\n         */\n        initializeSectorCards() {\n            const sectorCards = document.querySelectorAll('.sector-card');\n            \n            sectorCards.forEach((card, index) => {\n                // Animation d'apparition avec d√©lai\n                setTimeout(() => {\n                    card.classList.add('slide-in-right');\n                }, index * 100);\n                \n                // Effet hover\n                this.addHoverEffect(card);\n                \n                // Am√©lioration des liens\n                this.enhanceSectorCardLinks(card);\n                \n                // Badge de difficult√© dynamique\n                this.addDifficultyBadge(card);\n            });\n            \n            console.log(`üéØ Enhanced ${sectorCards.length} sector cards`);\n        }\n        \n        /**\n         * Am√©liore les liens des cartes secteurs\n         */\n        enhanceSectorCardLinks(card) {\n            const links = card.querySelectorAll('a');\n            \n            links.forEach(link => {\n                // Pr√©chargement au hover\n                link.addEventListener('mouseenter', () => {\n                    const href = link.getAttribute('href');\n                    if (href && href.startsWith('/sectors/')) {\n                        // Pr√©charger la page secteur\n                        const prefetchLink = document.createElement('link');\n                        prefetchLink.rel = 'prefetch';\n                        prefetchLink.href = href;\n                        document.head.appendChild(prefetchLink);\n                    }\n                });\n                \n                // Analytics sur les clics\n                link.addEventListener('click', () => {\n                    if (window.gtag) {\n                        window.gtag('event', 'sector_card_click', {\n                            site_id: this.siteId,\n                            sector_link: link.getAttribute('href')\n                        });\n                    }\n                });\n            });\n        }\n        \n        /**\n         * Ajoute un badge de difficult√© color√©\n         */\n        addDifficultyBadge(card) {\n            const difficultyText = card.querySelector('.sector-difficulty');\n            if (!difficultyText) return;\n            \n            const difficulty = difficultyText.textContent.trim();\n            const badge = document.createElement('span');\n            badge.className = `difficulty-badge ${this.getDifficultyClass(difficulty)}`;\n            badge.textContent = difficulty;\n            \n            // Remplacer le texte par le badge\n            difficultyText.innerHTML = '';\n            difficultyText.appendChild(badge);\n        }\n        \n        /**\n         * D√©termine la classe CSS selon la difficult√©\n         */\n        getDifficultyClass(difficulty) {\n            // Extraire le grade num√©rique\n            const gradeMatch = difficulty.match(/(\\d+)/);\n            if (!gradeMatch) return 'difficulty-unknown';\n            \n            const grade = parseInt(gradeMatch[1]);\n            \n            if (grade <= 4) return 'difficulty-easy';\n            if (grade <= 6) return 'difficulty-moderate';\n            if (grade <= 7) return 'difficulty-hard';\n            return 'difficulty-extreme';\n        }\n        \n        /**\n         * Initialise la carte du site\n         */\n        async initializeSiteMap() {\n            const mapContainer = document.getElementById('site-map');\n            if (!mapContainer) return;\n            \n            try {\n                // Charger le composant de carte si pas d√©j√† fait\n                if (!window.SwissMapManager) {\n                    await this.loadScript('/js/components/swiss-map-manager.js');\n                }\n                \n                const SwissMapManager = await TopoclimbCH.modules.load('swiss-map-manager');\n                \n                this.components.map = new SwissMapManager('site-map', {\n                    center: [this.siteData.coordinates_lat, this.siteData.coordinates_lng],\n                    zoom: 14,\n                    showControls: true\n                });\n                \n                this.components.map.init();\n                \n                // Ajouter le marqueur du site\n                this.components.map.addCircleMarker(\n                    this.siteData.coordinates_lat,\n                    this.siteData.coordinates_lng,\n                    {\n                        fillColor: '#e74c3c',\n                        popup: `<h6>${this.siteData.name}</h6><p>${this.siteData.description || ''}</p>`\n                    }\n                );\n                \n                // Ajouter les secteurs si disponibles\n                if (this.siteData.sectors) {\n                    this.addSectorsToMap();\n                }\n                \n                console.log('üó∫Ô∏è Site map initialized');\n                \n            } catch (error) {\n                console.error('Site map initialization failed:', error);\n            }\n        }\n        \n        /**\n         * Ajoute les secteurs √† la carte\n         */\n        addSectorsToMap() {\n            this.siteData.sectors.forEach(sector => {\n                if (sector.coordinates_lat && sector.coordinates_lng) {\n                    this.components.map.addCircleMarker(\n                        sector.coordinates_lat,\n                        sector.coordinates_lng,\n                        {\n                            radius: 6,\n                            fillColor: '#3498db',\n                            popup: `\n                                <h6>${sector.name}</h6>\n                                <p><strong>Voies:</strong> ${sector.route_count || 'N/A'}</p>\n                                <p><strong>Difficult√©:</strong> ${sector.difficulty_range || 'N/A'}</p>\n                                <a href=\"/sectors/${sector.id}\" class=\"btn btn-sm btn-primary\">Voir d√©tails</a>\n                            `\n                        }\n                    );\n                }\n            });\n        }\n        \n        /**\n         * Initialise la galerie photos\n         */\n        initializePhotoGallery() {\n            const galleryImages = document.querySelectorAll('.site-gallery img');\n            \n            galleryImages.forEach((img, index) => {\n                // Lazy loading\n                if (img.dataset.src) {\n                    img.dataset.lightbox = 'site-gallery';\n                    \n                    if ('IntersectionObserver' in window) {\n                        const observer = new IntersectionObserver((entries) => {\n                            entries.forEach(entry => {\n                                if (entry.isIntersecting) {\n                                    const img = entry.target;\n                                    img.src = img.dataset.src;\n                                    img.classList.remove('lazy');\n                                    observer.unobserve(img);\n                                }\n                            });\n                        });\n                        observer.observe(img);\n                    } else {\n                        img.src = img.dataset.src;\n                    }\n                }\n                \n                // Animation d'apparition\n                setTimeout(() => {\n                    img.classList.add('fade-in-up');\n                }, index * 100);\n            });\n            \n            console.log(`üì∏ Enhanced ${galleryImages.length} gallery images`);\n        }\n        \n        /**\n         * Initialise le widget m√©t√©o local\n         */\n        async initializeLocalWeather() {\n            const weatherContainer = document.getElementById('local-weather');\n            if (!weatherContainer || !this.siteData.coordinates_lat) return;\n            \n            try {\n                const weather = await api.getWeather(\n                    this.siteData.coordinates_lat,\n                    this.siteData.coordinates_lng\n                );\n                \n                this.displayLocalWeather(weather, weatherContainer);\n                console.log('üå§Ô∏è Local weather loaded');\n                \n            } catch (error) {\n                console.error('Local weather failed:', error);\n            }\n        }\n        \n        /**\n         * Affiche la m√©t√©o locale\n         */\n        displayLocalWeather(weather, container) {\n            const current = weather.current;\n            \n            container.innerHTML = `\n                <div class=\"local-weather\">\n                    <h6><i class=\"fa fa-cloud-sun\"></i> M√©t√©o locale</h6>\n                    <div class=\"weather-summary\">\n                        <span class=\"weather-temp\">${Math.round(current.temperature)}¬∞C</span>\n                        <span class=\"weather-desc\">${this.getWeatherDescription(current.weather_code)}</span>\n                        <span class=\"weather-wind\">Vent: ${Math.round(current.wind_speed * 3.6)} km/h</span>\n                    </div>\n                </div>\n            `;\n        }\n        \n        /**\n         * Initialise les actions rapides\n         */\n        initializeQuickActions() {\n            // Bouton de partage\n            this.setupSocialSharing();\n            \n            // Bouton favoris\n            this.setupFavorites();\n            \n            // Bouton d'impression\n            this.setupPrintButton();\n            \n            // Navigation rapide\n            this.setupQuickNavigation();\n        }\n        \n        /**\n         * Configuration du partage social\n         */\n        setupSocialSharing() {\n            const shareButtons = document.querySelectorAll('[data-share]');\n            \n            shareButtons.forEach(button => {\n                button.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const platform = button.dataset.share;\n                    this.shareOnPlatform(platform);\n                });\n            });\n        }\n        \n        /**\n         * Partage sur une plateforme sociale\n         */\n        shareOnPlatform(platform) {\n            const url = encodeURIComponent(window.location.href);\n            const title = encodeURIComponent(`${this.siteData.name} - Site d'escalade TopoclimbCH`);\n            const description = encodeURIComponent(this.siteData.description || '');\n            \n            const shareUrls = {\n                facebook: `https://www.facebook.com/sharer/sharer.php?u=${url}`,\n                twitter: `https://twitter.com/intent/tweet?url=${url}&text=${title}`,\n                whatsapp: `https://wa.me/?text=${title}%20${url}`,\n                email: `mailto:?subject=${title}&body=${description}%0A%0A${url}`\n            };\n            \n            if (shareUrls[platform]) {\n                if (platform === 'email') {\n                    window.location.href = shareUrls[platform];\n                } else {\n                    window.open(shareUrls[platform], '_blank', 'width=600,height=400');\n                }\n            }\n        }\n        \n        /**\n         * Configuration des favoris\n         */\n        setupFavorites() {\n            const favoriteBtn = document.getElementById('favorite-btn');\n            if (!favoriteBtn) return;\n            \n            favoriteBtn.addEventListener('click', async () => {\n                try {\n                    const response = await api.post('/api/favorites/sites', {\n                        site_id: this.siteId\n                    });\n                    \n                    if (response.success) {\n                        favoriteBtn.classList.toggle('favorited');\n                        const icon = favoriteBtn.querySelector('i');\n                        icon.className = favoriteBtn.classList.contains('favorited') ?\n                                       'fa fa-heart' : 'fa fa-heart-o';\n                        \n                        ui.toast.success('Ajout√© aux favoris !');\n                    }\n                } catch (error) {\n                    console.error('Favorite error:', error);\n                    ui.toast.error('Erreur lors de l\\'ajout aux favoris');\n                }\n            });\n        }\n        \n        /**\n         * Configuration du bouton d'impression\n         */\n        setupPrintButton() {\n            const printBtn = document.getElementById('print-btn');\n            if (printBtn) {\n                printBtn.addEventListener('click', () => {\n                    window.print();\n                });\n            }\n        }\n        \n        /**\n         * Configuration de la navigation rapide\n         */\n        setupQuickNavigation() {\n            // Navigation par secteurs\n            const sectorNavLinks = document.querySelectorAll('.sector-nav-link');\n            \n            sectorNavLinks.forEach(link => {\n                link.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const targetId = link.getAttribute('href').substring(1);\n                    const target = document.getElementById(targetId);\n                    \n                    if (target) {\n                        utils.scrollToElement(target, { offset: 80 });\n                    }\n                });\n            });\n        }\n        \n        /**\n         * Configuration des interactions\n         */\n        setupInteractions() {\n            // Tabs dynamiques\n            this.setupDynamicTabs();\n            \n            // Recherche dans les secteurs\n            this.setupSectorSearch();\n            \n            // Filtrage par difficult√©\n            this.setupDifficultyFilter();\n        }\n        \n        /**\n         * Configuration des onglets dynamiques\n         */\n        setupDynamicTabs() {\n            const tabButtons = document.querySelectorAll('[data-tab]');\n            \n            tabButtons.forEach(button => {\n                button.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    \n                    const targetId = button.dataset.tab;\n                    const target = document.getElementById(targetId);\n                    \n                    if (target) {\n                        // D√©sactiver tous les onglets\n                        document.querySelectorAll('[data-tab]').forEach(btn => {\n                            btn.classList.remove('active');\n                        });\n                        \n                        document.querySelectorAll('.tab-pane').forEach(pane => {\n                            pane.classList.remove('active');\n                        });\n                        \n                        // Activer l'onglet et le panneau cibl√©s\n                        button.classList.add('active');\n                        target.classList.add('active');\n                    }\n                });\n            });\n        }\n        \n        /**\n         * Configuration de la recherche dans les secteurs\n         */\n        setupSectorSearch() {\n            const searchInput = document.getElementById('sector-search');\n            if (!searchInput) return;\n            \n            const debouncedSearch = utils.debounce((query) => {\n                this.filterSectors(query);\n            }, 300);\n            \n            searchInput.addEventListener('input', (e) => {\n                debouncedSearch(e.target.value);\n            });\n        }\n        \n        /**\n         * Filtre les secteurs selon la requ√™te\n         */\n        filterSectors(query) {\n            const sectorCards = document.querySelectorAll('.sector-card');\n            const lowercaseQuery = query.toLowerCase();\n            \n            sectorCards.forEach(card => {\n                const sectorName = card.querySelector('.sector-name')?.textContent.toLowerCase() || '';\n                const sectorDesc = card.querySelector('.sector-description')?.textContent.toLowerCase() || '';\n                \n                const matches = sectorName.includes(lowercaseQuery) || sectorDesc.includes(lowercaseQuery);\n                \n                card.style.display = matches ? 'block' : 'none';\n            });\n        }\n        \n        /**\n         * Configuration des raccourcis clavier\n         */\n        setupKeyboardShortcuts() {\n            document.addEventListener('keydown', (e) => {\n                // Ctrl/Cmd + K pour recherche rapide\n                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n                    e.preventDefault();\n                    const searchInput = document.getElementById('sector-search');\n                    if (searchInput) {\n                        searchInput.focus();\n                    }\n                }\n                \n                // √âchap pour fermer la recherche\n                if (e.key === 'Escape') {\n                    const searchInput = document.getElementById('sector-search');\n                    if (searchInput && searchInput === document.activeElement) {\n                        searchInput.value = '';\n                        searchInput.blur();\n                        this.filterSectors('');\n                    }\n                }\n            });\n        }\n        \n        /**\n         * Configuration des animations\n         */\n        setupAnimations() {\n            // Observer d'intersection pour les animations au scroll\n            if ('IntersectionObserver' in window) {\n                const observer = new IntersectionObserver((entries) => {\n                    entries.forEach(entry => {\n                        if (entry.isIntersecting) {\n                            entry.target.classList.add('animate-in');\n                        }\n                    });\n                }, {\n                    threshold: 0.1\n                });\n                \n                // Observer les √©l√©ments √† animer\n                document.querySelectorAll('.animate-on-scroll').forEach(el => {\n                    observer.observe(el);\n                });\n            }\n        }\n        \n        /**\n         * Charge un script dynamiquement\n         */\n        loadScript(src) {\n            return new Promise((resolve, reject) => {\n                if (document.querySelector(`script[src=\"${src}\"]`)) {\n                    resolve();\n                    return;\n                }\n                \n                const script = document.createElement('script');\n                script.src = src;\n                script.onload = resolve;\n                script.onerror = reject;\n                document.head.appendChild(script);\n            });\n        }\n        \n        /**\n         * Obtient la description m√©t√©o\n         */\n        getWeatherDescription(code) {\n            const descriptions = {\n                0: 'Ciel d√©gag√©', 1: 'Principalement d√©gag√©', 2: 'Partiellement nuageux',\n                3: 'Couvert', 45: 'Brouillard', 51: 'Bruine l√©g√®re', 61: 'Pluie l√©g√®re',\n                71: 'Neige l√©g√®re', 95: 'Orage'\n            };\n            return descriptions[code] || 'Conditions inconnues';\n        }\n        \n        /**\n         * Mode de secours\n         */\n        initializeFallback() {\n            console.log('üîÑ Initializing fallback mode for site page');\n            \n            // Fonctionnalit√©s de base seulement\n            this.setupBasicInteractions();\n            \n            ui.toast.warning('Page charg√©e en mode simplifi√©', { duration: 5000 });\n        }\n        \n        /**\n         * Interactions de base pour le mode de secours\n         */\n        setupBasicInteractions() {\n            // Liens de secteurs avec pr√©chargement simple\n            document.querySelectorAll('.sector-card a').forEach(link => {\n                link.addEventListener('click', () => {\n                    ui.toast.info('Chargement du secteur...');\n                });\n            });\n        }\n        \n        /**\n         * Nettoyage\n         */\n        cleanup() {\n            // Nettoyer les composants\n            Object.values(this.components).forEach(component => {\n                if (component && component.destroy) {\n                    component.destroy();\n                }\n            });\n            \n            // Nettoyer les √©v√©nements\n            document.removeEventListener('keydown', this.handleKeyboard);\n        }\n    }\n    \n    return SiteShowPage;\n});\n\n// Auto-initialisation\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // V√©rifier qu'on est sur une page site\n    if (!document.body.classList.contains('site-show-page') && !window.location.pathname.match(/\\/sites\\/\\d+/)) {\n        return;\n    }\n    \n    try {\n        // Attendre TopoclimbCH\n        if (!window.TopoclimbCH || !window.TopoclimbCH.initialized) {\n            await new Promise(resolve => {\n                const checkReady = () => {\n                    if (window.TopoclimbCH && window.TopoclimbCH.initialized) {\n                        resolve();\n                    } else {\n                        setTimeout(checkReady, 100);\n                    }\n                };\n                checkReady();\n            });\n        }\n        \n        // Initialiser la page\n        const SiteShowPage = await TopoclimbCH.modules.load('page-site-show');\n        const sitePage = new SiteShowPage();\n        await sitePage.init();\n        \n        // Nettoyage\n        window.addEventListener('beforeunload', () => {\n            sitePage.cleanup();\n        });\n        \n    } catch (error) {\n        console.error('‚ùå Failed to initialize site show page:', error);\n    }\n});\n\nconsole.log('üßó Site Show Page module ready');