/**
 * Page Région Show - Version moderne modulaire
 * Remplace l'ancien show.js monolithique (1764 lignes) par une architecture modulaire
 */

// Enregistrement du module de page région
TopoclimbCH.modules.register('page-region-show', ['utils', 'api', 'ui'], async (utils, api, ui) => {
    
    class RegionShowPage {
        constructor() {\n            this.regionData = window.regionData || null;\n            this.components = {};\n            this.initialized = false;\n        }\n        \n        /**\n         * Initialise la page région\n         */\n        async init() {\n            if (this.initialized) {\n                console.warn('Region show page already initialized');\n                return;\n            }\n            \n            if (!this.regionData) {\n                console.error('No region data found in window.regionData');\n                return;\n            }\n            \n            console.log(`🏔️ Initializing region page: ${this.regionData.region?.name}`);\n            \n            try {\n                // Chargement des composants requis\n                await this.loadRequiredComponents();\n                \n                // Initialisation des composants\n                await this.initializeComponents();\n                \n                // Configuration des événements globaux\n                this.setupGlobalEvents();\n                \n                this.initialized = true;\n                console.log('✅ Region show page initialized successfully');\n                \n            } catch (error) {\n                console.error('❌ Failed to initialize region page:', error);\n                this.initializeFallback();\n            }\n        }\n        \n        /**\n         * Charge les composants requis dynamiquement\n         */\n        async loadRequiredComponents() {\n            const componentsToLoad = [];\n            \n            // Carte interactive si élément présent\n            if (document.getElementById('region-map')) {\n                componentsToLoad.push(this.loadScript('/js/components/region-map.js'));\n            }\n            \n            // Widget météo si élément présent\n            if (document.getElementById('weather-widget')) {\n                componentsToLoad.push(this.loadScript('/js/components/weather-widget.js'));\n            }\n            \n            // Galerie photos si élément présent\n            if (document.querySelector('.photo-gallery')) {\n                componentsToLoad.push(this.loadScript('/js/components/photo-gallery.js'));\n            }\n            \n            // Événements si élément présent\n            if (document.getElementById('events-widget')) {\n                componentsToLoad.push(this.loadScript('/js/components/events-widget.js'));\n            }\n            \n            // Statistiques avancées\n            if (document.querySelector('.stats-charts')) {\n                componentsToLoad.push(this.loadScript('/js/components/stats-charts.js'));\n            }\n            \n            // Attendre le chargement de tous les composants\n            await Promise.all(componentsToLoad);\n            console.log(`📦 Loaded ${componentsToLoad.length} components`);\n        }\n        \n        /**\n         * Charge un script dynamiquement\n         */\n        loadScript(src) {\n            return new Promise((resolve, reject) => {\n                if (document.querySelector(`script[src=\"${src}\"]`)) {\n                    resolve();\n                    return;\n                }\n                \n                const script = document.createElement('script');\n                script.src = src;\n                script.onload = resolve;\n                script.onerror = reject;\n                document.head.appendChild(script);\n            });\n        }\n        \n        /**\n         * Initialise tous les composants\n         */\n        async initializeComponents() {\n            // 1. Carte interactive\n            await this.initializeMap();\n            \n            // 2. Widget météo\n            await this.initializeWeather();\n            \n            // 3. Galerie photos\n            await this.initializePhotoGallery();\n            \n            // 4. Widget événements\n            await this.initializeEvents();\n            \n            // 5. Graphiques statistiques\n            await this.initializeStats();\n            \n            // 6. Fonctionnalités de base\n            this.initializeBasicFeatures();\n        }\n        \n        /**\n         * Initialise la carte de la région\n         */\n        async initializeMap() {\n            const mapContainer = document.getElementById('region-map');\n            if (!mapContainer || !window.RegionMapManager) return;\n            \n            try {\n                // Attendre que le module soit chargé\n                const RegionMapManager = await TopoclimbCH.modules.load('region-map');\n                \n                this.components.map = new RegionMapManager('region-map', {\n                    regionData: this.regionData.region,\n                    sectors: this.regionData.sectors || [],\n                    zoom: 12\n                });\n                \n                this.components.map.init();\n                console.log('🗺️ Region map initialized');\n                \n            } catch (error) {\n                console.error('Map initialization failed:', error);\n            }\n        }\n        \n        /**\n         * Initialise le widget météo\n         */\n        async initializeWeather() {\n            const weatherContainer = document.getElementById('weather-widget');\n            if (!weatherContainer || !window.WeatherWidget) return;\n            \n            try {\n                const WeatherWidget = await TopoclimbCH.modules.load('weather-widget');\n                \n                this.components.weather = new WeatherWidget('weather-widget', {\n                    regionData: this.regionData.region,\n                    coordinates: {\n                        lat: this.regionData.region?.coordinates_lat,\n                        lng: this.regionData.region?.coordinates_lng\n                    },\n                    showForecast: true,\n                    showClimbingConditions: true\n                });\n                \n                this.components.weather.init();\n                console.log('🌤️ Weather widget initialized');\n                \n            } catch (error) {\n                console.error('Weather widget initialization failed:', error);\n            }\n        }\n        \n        /**\n         * Initialise la galerie photos\n         */\n        async initializePhotoGallery() {\n            const galleryContainer = document.querySelector('.photo-gallery');\n            if (!galleryContainer) return;\n            \n            try {\n                // Utiliser le lightbox du système UI\n                const images = galleryContainer.querySelectorAll('img[data-src]');\n                images.forEach((img, index) => {\n                    img.dataset.lightbox = 'region-gallery';\n                    img.style.cursor = 'pointer';\n                    \n                    // Lazy loading\n                    if ('IntersectionObserver' in window) {\n                        const observer = new IntersectionObserver((entries) => {\n                            entries.forEach(entry => {\n                                if (entry.isIntersecting) {\n                                    const img = entry.target;\n                                    img.src = img.dataset.src;\n                                    img.classList.remove('lazy');\n                                    observer.unobserve(img);\n                                }\n                            });\n                        });\n                        observer.observe(img);\n                    } else {\n                        img.src = img.dataset.src;\n                    }\n                });\n                \n                console.log(`📸 Photo gallery initialized with ${images.length} images`);\n                \n            } catch (error) {\n                console.error('Photo gallery initialization failed:', error);\n            }\n        }\n        \n        /**\n         * Initialise le widget événements\n         */\n        async initializeEvents() {\n            const eventsContainer = document.getElementById('events-widget');\n            if (!eventsContainer) return;\n            \n            try {\n                // Charger les événements de la région\n                const events = await api.get('/api/events', {\n                    region_id: this.regionData.region?.id,\n                    limit: 5,\n                    upcoming: true\n                });\n                \n                this.displayEvents(events.data || []);\n                console.log('📅 Events widget initialized');\n                \n            } catch (error) {\n                console.error('Events widget initialization failed:', error);\n            }\n        }\n        \n        /**\n         * Affiche les événements\n         */\n        displayEvents(events) {\n            const container = document.getElementById('events-widget');\n            if (!container) return;\n            \n            if (events.length === 0) {\n                container.innerHTML = `\n                    <div class=\"no-events\">\n                        <i class=\"fa fa-calendar\"></i>\n                        <p>Aucun événement à venir</p>\n                    </div>\n                `;\n                return;\n            }\n            \n            const eventsHtml = events.map(event => `\n                <div class=\"event-item\">\n                    <div class=\"event-date\">\n                        <span class=\"event-day\">${new Date(event.date).getDate()}</span>\n                        <span class=\"event-month\">${new Date(event.date).toLocaleDateString('fr-FR', { month: 'short' })}</span>\n                    </div>\n                    <div class=\"event-info\">\n                        <h6 class=\"event-title\">${utils.escapeHtml(event.title)}</h6>\n                        <p class=\"event-description\">${utils.escapeHtml(event.description || '')}</p>\n                        <div class=\"event-meta\">\n                            <span class=\"event-type\">${event.type}</span>\n                            <span class=\"event-participants\">${event.participants_count || 0} participants</span>\n                        </div>\n                    </div>\n                    <div class=\"event-actions\">\n                        <a href=\"/events/${event.id}\" class=\"btn btn-sm btn-outline-primary\">\n                            Voir détails\n                        </a>\n                    </div>\n                </div>\n            `).join('');\n            \n            container.innerHTML = `\n                <div class=\"events-header\">\n                    <h6>\n                        <i class=\"fa fa-calendar\"></i>\n                        Événements à venir\n                    </h6>\n                    <a href=\"/events?region=${this.regionData.region?.id}\" class=\"btn btn-sm btn-link\">\n                        Voir tous\n                    </a>\n                </div>\n                <div class=\"events-list\">\n                    ${eventsHtml}\n                </div>\n            `;\n        }\n        \n        /**\n         * Initialise les statistiques\n         */\n        async initializeStats() {\n            const statsContainer = document.querySelector('.stats-charts');\n            if (!statsContainer) return;\n            \n            try {\n                const stats = this.regionData.stats || {};\n                \n                // Graphique de répartition des difficultés\n                this.createDifficultyChart(stats.difficulty_distribution);\n                \n                // Graphique d'activité mensuelle\n                this.createActivityChart(stats.monthly_activity);\n                \n                console.log('📊 Stats charts initialized');\n                \n            } catch (error) {\n                console.error('Stats initialization failed:', error);\n            }\n        }\n        \n        /**\n         * Crée le graphique de répartition des difficultés\n         */\n        createDifficultyChart(data) {\n            const container = document.getElementById('difficulty-chart');\n            if (!container || !data) return;\n            \n            // Simple barre chart en CSS\n            const maxValue = Math.max(...Object.values(data));\n            const chartHtml = Object.entries(data).map(([grade, count]) => {\n                const percentage = (count / maxValue) * 100;\n                return `\n                    <div class=\"chart-bar\">\n                        <div class=\"bar-label\">${grade}</div>\n                        <div class=\"bar-container\">\n                            <div class=\"bar-fill\" style=\"width: ${percentage}%\"></div>\n                            <span class=\"bar-value\">${count}</span>\n                        </div>\n                    </div>\n                `;\n            }).join('');\n            \n            container.innerHTML = `\n                <h6>Répartition des difficultés</h6>\n                <div class=\"difficulty-chart\">\n                    ${chartHtml}\n                </div>\n            `;\n        }\n        \n        /**\n         * Crée le graphique d'activité\n         */\n        createActivityChart(data) {\n            const container = document.getElementById('activity-chart');\n            if (!container || !data) return;\n            \n            // Simple line chart approximation\n            const chartHtml = data.map((value, index) => {\n                const month = new Date(2024, index).toLocaleDateString('fr-FR', { month: 'short' });\n                return `\n                    <div class=\"activity-point\" style=\"height: ${value}%\">\n                        <span class=\"point-label\">${month}</span>\n                        <span class=\"point-value\">${value}</span>\n                    </div>\n                `;\n            }).join('');\n            \n            container.innerHTML = `\n                <h6>Activité mensuelle</h6>\n                <div class=\"activity-chart\">\n                    ${chartHtml}\n                </div>\n            `;\n        }\n        \n        /**\n         * Initialise les fonctionnalités de base\n         */\n        initializeBasicFeatures() {\n            // Boutons de partage\n            this.setupSocialSharing();\n            \n            // Favoris\n            this.setupFavorites();\n            \n            // Impression\n            this.setupPrintButton();\n            \n            // Scroll fluide\n            this.setupSmoothScrolling();\n        }\n        \n        /**\n         * Configuration du partage social\n         */\n        setupSocialSharing() {\n            const shareButtons = document.querySelectorAll('[data-share]');\n            shareButtons.forEach(button => {\n                button.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const platform = button.dataset.share;\n                    this.shareOnPlatform(platform);\n                });\n            });\n        }\n        \n        /**\n         * Partage sur une plateforme\n         */\n        shareOnPlatform(platform) {\n            const url = encodeURIComponent(window.location.href);\n            const title = encodeURIComponent(`${this.regionData.region?.name} - TopoclimbCH`);\n            const description = encodeURIComponent(this.regionData.region?.description || '');\n            \n            const shareUrls = {\n                facebook: `https://www.facebook.com/sharer/sharer.php?u=${url}`,\n                twitter: `https://twitter.com/intent/tweet?url=${url}&text=${title}`,\n                linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${url}`,\n                whatsapp: `https://wa.me/?text=${title}%20${url}`,\n                email: `mailto:?subject=${title}&body=${description}%0A%0A${url}`\n            };\n            \n            if (shareUrls[platform]) {\n                if (platform === 'email') {\n                    window.location.href = shareUrls[platform];\n                } else {\n                    window.open(shareUrls[platform], '_blank', 'width=600,height=400');\n                }\n            }\n        }\n        \n        /**\n         * Configuration des favoris\n         */\n        setupFavorites() {\n            const favoriteBtn = document.getElementById('favorite-btn');\n            if (!favoriteBtn) return;\n            \n            favoriteBtn.addEventListener('click', async () => {\n                try {\n                    const response = await api.post('/api/favorites/regions', {\n                        region_id: this.regionData.region?.id\n                    });\n                    \n                    if (response.success) {\n                        favoriteBtn.classList.toggle('favorited');\n                        const icon = favoriteBtn.querySelector('i');\n                        icon.className = favoriteBtn.classList.contains('favorited') ?\n                                       'fa fa-heart' : 'fa fa-heart-o';\n                        \n                        ui.toast.success('Ajouté aux favoris !');\n                    }\n                } catch (error) {\n                    console.error('Favorite error:', error);\n                    ui.toast.error('Erreur lors de l\\'ajout aux favoris');\n                }\n            });\n        }\n        \n        /**\n         * Configuration du bouton d'impression\n         */\n        setupPrintButton() {\n            const printBtn = document.getElementById('print-btn');\n            if (printBtn) {\n                printBtn.addEventListener('click', () => {\n                    window.print();\n                });\n            }\n        }\n        \n        /**\n         * Configuration du scroll fluide\n         */\n        setupSmoothScrolling() {\n            document.querySelectorAll('a[href^=\"#\"]').forEach(link => {\n                link.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const targetId = link.getAttribute('href').substring(1);\n                    const target = document.getElementById(targetId);\n                    \n                    if (target) {\n                        utils.scrollToElement(target, { offset: 80 });\n                    }\n                });\n            });\n        }\n        \n        /**\n         * Configuration des événements globaux de la page\n         */\n        setupGlobalEvents() {\n            // Redimensionnement de fenêtre\n            window.addEventListener('resize', utils.debounce(() => {\n                this.handleResize();\n            }, 250));\n            \n            // Changement de visibilité de page\n            document.addEventListener('visibilitychange', () => {\n                if (!document.hidden) {\n                    this.handlePageVisible();\n                }\n            });\n            \n            // Écouter les événements des composants\n            TopoclimbCH.events.on('weather:updated', (data) => {\n                console.log('Weather updated:', data);\n            });\n            \n            TopoclimbCH.events.on('map:sector-clicked', (sector) => {\n                console.log('Sector clicked:', sector);\n                // Potentiellement ouvrir un modal avec les détails\n            });\n        }\n        \n        /**\n         * Gère le redimensionnement de fenêtre\n         */\n        handleResize() {\n            // Redimensionner la carte si présente\n            if (this.components.map && this.components.map.getLeafletMap) {\n                setTimeout(() => {\n                    this.components.map.getLeafletMap().invalidateSize();\n                }, 100);\n            }\n        }\n        \n        /**\n         * Gère le retour de visibilité de la page\n         */\n        handlePageVisible() {\n            // Rafraîchir la météo si nécessaire\n            if (this.components.weather) {\n                this.components.weather.loadWeatherData();\n            }\n        }\n        \n        /**\n         * Mode de secours si erreur d'initialisation\n         */\n        initializeFallback() {\n            console.log('🔄 Initializing fallback mode for region page');\n            \n            // Fonctionnalités de base seulement\n            this.setupBasicInteractions();\n            \n            ui.toast.warning('Page chargée en mode simplifié', {\n                duration: 5000\n            });\n        }\n        \n        /**\n         * Interactions de base pour le mode de secours\n         */\n        setupBasicInteractions() {\n            // Tabs simples\n            document.querySelectorAll('[data-tab]').forEach(tab => {\n                tab.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const targetId = tab.dataset.tab;\n                    const target = document.getElementById(targetId);\n                    \n                    if (target) {\n                        // Masquer tous les panels\n                        document.querySelectorAll('.tab-panel').forEach(panel => {\n                            panel.classList.remove('active');\n                        });\n                        \n                        // Désactiver tous les tabs\n                        document.querySelectorAll('[data-tab]').forEach(t => {\n                            t.classList.remove('active');\n                        });\n                        \n                        // Activer le tab et panel ciblés\n                        tab.classList.add('active');\n                        target.classList.add('active');\n                    }\n                });\n            });\n        }\n        \n        /**\n         * Nettoyage avant fermeture de page\n         */\n        cleanup() {\n            // Nettoyer les composants\n            Object.values(this.components).forEach(component => {\n                if (component && component.destroy) {\n                    component.destroy();\n                }\n            });\n            \n            // Nettoyer les événements\n            window.removeEventListener('resize', this.handleResize);\n            document.removeEventListener('visibilitychange', this.handlePageVisible);\n        }\n    }\n    \n    return RegionShowPage;\n});\n\n// Auto-initialisation quand le DOM est prêt\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // Vérifier qu'on est bien sur une page région\n    if (!document.body.classList.contains('region-show-page') && !window.regionData) {\n        return;\n    }\n    \n    try {\n        // Attendre que TopoclimbCH soit prêt\n        if (!window.TopoclimbCH || !window.TopoclimbCH.initialized) {\n            await new Promise(resolve => {\n                const checkReady = () => {\n                    if (window.TopoclimbCH && window.TopoclimbCH.initialized) {\n                        resolve();\n                    } else {\n                        setTimeout(checkReady, 100);\n                    }\n                };\n                checkReady();\n            });\n        }\n        \n        // Charger et initialiser la page\n        const RegionShowPage = await TopoclimbCH.modules.load('page-region-show');\n        const regionPage = new RegionShowPage();\n        await regionPage.init();\n        \n        // Nettoyer avant fermeture de page\n        window.addEventListener('beforeunload', () => {\n            regionPage.cleanup();\n        });\n        \n    } catch (error) {\n        console.error('❌ Failed to initialize region show page:', error);\n    }\n});\n\nconsole.log('🏔️ Region Show Page module ready');