class ViewManager { constructor(containerSelector='.entities-container') { this.container=document.querySelector(containerSelector); this.currentView=null; console.log('ViewManager constructor:', containerSelector, this.container); if (!this.container) { console.warn('ViewManager: Container not found:', containerSelector); return; } this.detectInitialView(); this.init(); } detectInitialView() { const activeView=this.container.querySelector('.view-grid.active, .view-list.active, .view-compact.active'); if (activeView) { if (activeView.classList.contains('view-grid')) { this.currentView='grid'; } else if (activeView.classList.contains('view-list')) { this.currentView='list'; } else if (activeView.classList.contains('view-compact')) { this.currentView='compact'; } } else { this.currentView='grid'; } console.log('ViewManager: Detected initial view from DOM:', this.currentView); } init() { console.log('ViewManager init started - Current view detected:', this.currentView); const views=this.container.querySelectorAll('.view-grid, .view-list, .view-compact'); console.log('ViewManager: Found views:', views.length); views.forEach((view, i) => { const computed=window.getComputedStyle(view); console.log(`ViewManager: View ${i}:`, view.className, 'Active:', view.classList.contains('active'), 'Display:', computed.display); }); this.setupViewControls(); this.loadSavedView(); this.setupQuickActions(); console.log('ViewManager init completed - Final state:', this.currentView); } setupViewControls() { const viewControls=document.querySelectorAll('[data-view]'); console.log('ViewManager: Found view controls:', viewControls.length); viewControls.forEach((control, index) => { console.log(`ViewManager: Setting up control ${index}:`, control.dataset.view); control.removeEventListener('click', this.handleViewChange); control.addEventListener('click', (e) => { e.preventDefault(); console.log('ViewManager: Button clicked:', control.dataset.view); const viewType=control.dataset.view; this.switchView(viewType); this.updateActiveButton(control); }); }); } switchView(viewType) { if (!['grid', 'list', 'compact'].includes(viewType)) { console.warn('ViewManager: Invalid view type:', viewType); return; } if (this.currentView===viewType) { console.log('ViewManager: ‚úÖ View already active:', viewType); return; } console.log('ViewManager: üîÑ Switching from', this.currentView, 'to view:', viewType); const allViews=this.container.querySelectorAll('.view-grid, .view-list, .view-compact'); console.log('ViewManager: Found views for hiding:', allViews.length); allViews.forEach((view) => { console.log('ViewManager: üëÅÔ∏è Force hiding view:', view.className); view.classList.remove('active'); view.style.display='none'; }); const targetView=this.container.querySelector(`.view-${viewType}`); if (targetView) { console.log('ViewManager: ‚úÖ Force activating view:', targetView.className); targetView.classList.add('active'); if (viewType==='grid') { targetView.style.display='grid'; } else { targetView.style.display='block'; } console.log('ViewManager: ‚úÖ View switched successfully to:', viewType); const finalComputed=window.getComputedStyle(targetView); console.log('ViewManager: Final computed display:', finalComputed.display); } else { console.error('ViewManager: ‚ùå Could not find target view for:', viewType); console.log('ViewManager: Available views:', Array.from(this.container.querySelectorAll('[class*="view-"]')).map(v => v.className)); } this.currentView=viewType; this.saveViewPreference(viewType); } updateActiveButton(activeButton) { document.querySelectorAll('[data-view]').forEach(btn => { btn.classList.remove('active'); }); activeButton.classList.add('active'); console.log('ViewManager: Updated active button to:', activeButton.dataset.view); } saveViewPreference(viewType) { try { localStorage.setItem('topoclimb_view_preference', viewType); console.log('ViewManager: Saved view preference:', viewType); } catch (e) { console.warn('Could not save view preference:', e); } } loadSavedView() { try { const savedView=localStorage.getItem('topoclimb_view_preference'); console.log('ViewManager: Raw saved view from localStorage:', savedView); console.log('ViewManager: Current view from DOM:', this.currentView); if (savedView&&['grid', 'list', 'compact'].includes(savedView)) { console.log('ViewManager: üíæ Loading saved view:', savedView); if (savedView!==this.currentView) { console.log('ViewManager: Switching from', this.currentView, 'to saved view', savedView); this.switchView(savedView); } else { console.log('ViewManager: Saved view matches current view, no switch needed'); } const button=document.querySelector(`[data-view="${savedView}"]`); if (button) { this.updateActiveButton(button); } } else { console.log('ViewManager: üÜï No saved view, using detected view:', this.currentView); const currentButton=document.querySelector(`[data-view="${this.currentView}"]`); if (currentButton) { this.updateActiveButton(currentButton); } } } catch (e) { console.warn('ViewManager: ‚ö†Ô∏è Could not load view preference:', e); } } setupQuickActions() { document.addEventListener('click', (e) => { if (e.target.closest('[data-action="weather"]')) { const button=e.target.closest('[data-action="weather"]'); const entityId=button.dataset.id; this.handleWeatherAction(entityId); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="map"]')) { const button=e.target.closest('[data-action="map"]'); const entityId=button.dataset.id; this.handleMapAction(entityId); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="gps"]')) { const button=e.target.closest('[data-action="gps"]'); const entityId=button.dataset.id; this.handleGpsAction(entityId); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="favorite"]')) { const button=e.target.closest('[data-action="favorite"]'); const entityId=button.dataset.id; this.handleFavoriteAction(entityId, button); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="share"]')) { const button=e.target.closest('[data-action="share"]'); const entityId=button.dataset.id; this.handleShareAction(entityId); } }); } handleWeatherAction(entityId) { this.showToast('M√©t√©o en cours de chargement...', 'info'); setTimeout(() => { this.showToast('Fonctionnalit√© m√©t√©o bient√¥t disponible', 'warning'); }, 1000); } handleMapAction(entityId) { this.showToast('Ouverture de la carte...', 'info'); setTimeout(() => { this.showToast('Fonctionnalit√© carte bient√¥t disponible', 'warning'); }, 1000); } handleGpsAction(entityId) { this.showToast('Ouverture GPS Navigation...', 'info'); setTimeout(() => { this.showToast('Fonctionnalit√© GPS bient√¥t disponible', 'warning'); }, 1000); } handleShareAction(entityId) { if (navigator.share) { navigator.share({ title: 'TopoclimbCH', text: 'D√©couvrez ce contenu sur TopoclimbCH', url: window.location.href }).then(() => { this.showToast('Partag√© avec succ√®s', 'success'); }).catch(() => { this.copyToClipboard(); }); } else { this.copyToClipboard(); } } copyToClipboard() { if (navigator.clipboard) { navigator.clipboard.writeText(window.location.href).then(() => { this.showToast('URL copi√©e dans le presse-papier', 'success'); }).catch(() => { this.showToast('Impossible de copier l\'URL', 'error'); }); } else { const textArea=document.createElement('textarea'); textArea.value=window.location.href; document.body.appendChild(textArea); textArea.select(); try { document.execCommand('copy'); this.showToast('URL copi√©e dans le presse-papier', 'success'); } catch (err) { this.showToast('Impossible de copier l\'URL', 'error'); } document.body.removeChild(textArea); } } handleFavoriteAction(entityId, button) { const isFavorite=button.classList.contains('favorited'); if (isFavorite) { button.classList.remove('favorited'); button.innerHTML='<i class="fas fa-heart"></i>'; this.showToast('Retir√© des favoris', 'success'); } else { button.classList.add('favorited'); button.innerHTML='<i class="fas fa-heart text-danger"></i>'; this.showToast('Ajout√© aux favoris', 'success'); } } showToast(message, type='info') { const toast=document.createElement('div'); toast.className=`toast-notification toast-${type}`; toast.textContent=message; Object.assign(toast.style, { position: 'fixed', top: '20px', right: '20px', padding: '12px 20px', borderRadius: '8px', color: 'white', fontWeight: '500', zIndex: '9999', transform: 'translateX(100%)', transition: 'transform 0.3s ease', maxWidth: '300px' }); const colors={ info: '#17a2b8', success: '#28a745', warning: '#ffc107', error: '#dc3545' }; toast.style.backgroundColor=colors[type]||colors.info; document.body.appendChild(toast); setTimeout(() => { toast.style.transform='translateX(0)'; }, 100); setTimeout(() => { toast.style.transform='translateX(100%)'; setTimeout(() => { if (toast.parentNode) { toast.parentNode.removeChild(toast); } }, 300); }, 3000); } } console.log('ViewManager script loaded'); document.addEventListener('DOMContentLoaded', () => { console.log('DOM loaded, initializing ViewManager...'); setTimeout(() => { const selectors=[ '.regions-container', '.sites-container', '.sectors-container', '.routes-container', '.books-container', '.entities-container' ]; let found=false; selectors.forEach(selector => { const container=document.querySelector(selector); if (container) { console.log('ViewManager: ‚úÖ Initializing for container:', selector); window.viewManager=new ViewManager(selector); found=true; const buttons=document.querySelectorAll('[data-view]'); console.log('ViewManager: ‚úÖ Found', buttons.length, 'view buttons'); buttons.forEach((btn, i) => { console.log(`ViewManager: Button ${i} - ${btn.dataset.view}:`, btn); }); } }); if (!found) { console.error('ViewManager: ‚ùå No valid containers found!'); console.log('Available containers:', document.querySelectorAll('[class*="container"]')); console.log('Available view buttons:', document.querySelectorAll('[data-view]')); } }, 100); }); window.ViewManager=ViewManager;