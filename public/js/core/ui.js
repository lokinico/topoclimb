/**
 * TopoclimbCH UI Components
 * Composants d'interface utilisateur modernes et unifiés
 */

// Enregistrement du module UI
TopoclimbCH.modules.register('ui', ['utils'], (utils) => {
    
    /**
     * 🪟 Gestionnaire de modales moderne
     */
    class ModalManager {
        constructor() {
            this.activeModal = null;
            this.stack = [];
            this.init();
        }
        
        init() {
            this.createOverlay();
            this.bindEvents();
        }
        
        createOverlay() {
            if (document.querySelector('.modal-overlay')) return;
            
            const overlay = document.createElement('div');
            overlay.className = 'modal-overlay';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                backdrop-filter: blur(2px);
                z-index: 9998;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
            `;
            
            document.body.appendChild(overlay);
        }
        
        bindEvents() {\n            // Délégation d'événements pour les déclencheurs\n            document.addEventListener('click', (e) => {\n                const trigger = e.target.closest('[data-modal]');\n                if (trigger) {\n                    e.preventDefault();\n                    const modalId = trigger.dataset.modal;\n                    this.open(modalId);\n                }\n                \n                // Fermeture par clic sur overlay\n                if (e.target.classList.contains('modal-overlay')) {\n                    this.close();\n                }\n                \n                // Fermeture par bouton close\n                if (e.target.closest('[data-modal-close]')) {\n                    this.close();\n                }\n            });\n            \n            // Fermeture par Escape\n            document.addEventListener('keydown', (e) => {\n                if (e.key === 'Escape' && this.activeModal) {\n                    this.close();\n                }\n            });\n        }\n        \n        open(modalId, options = {}) {\n            const modal = document.getElementById(modalId);\n            if (!modal) {\n                console.warn(`Modal ${modalId} not found`);\n                return;\n            }\n            \n            const { closeOnOverlay = true, closeOnEscape = true } = options;\n            \n            // Empiler la modale précédente\n            if (this.activeModal) {\n                this.stack.push(this.activeModal);\n                this.activeModal.style.display = 'none';\n            }\n            \n            this.activeModal = modal;\n            \n            // Affichage\n            const overlay = document.querySelector('.modal-overlay');\n            overlay.style.visibility = 'visible';\n            overlay.style.opacity = '1';\n            \n            modal.style.display = 'block';\n            modal.style.zIndex = '9999';\n            document.body.classList.add('modal-open');\n            \n            // Animation d'entrée\n            requestAnimationFrame(() => {\n                modal.classList.add('modal-show');\n            });\n            \n            // Focus trap\n            this.trapFocus(modal);\n            \n            TopoclimbCH.events.emit('modal:opened', { modalId, modal });\n        }\n        \n        close() {\n            if (!this.activeModal) return;\n            \n            const modal = this.activeModal;\n            const modalId = modal.id;\n            \n            // Animation de sortie\n            modal.classList.remove('modal-show');\n            \n            setTimeout(() => {\n                modal.style.display = 'none';\n                \n                // Restaurer la modale précédente ou masquer l'overlay\n                if (this.stack.length > 0) {\n                    this.activeModal = this.stack.pop();\n                    this.activeModal.style.display = 'block';\n                } else {\n                    this.activeModal = null;\n                    const overlay = document.querySelector('.modal-overlay');\n                    overlay.style.opacity = '0';\n                    overlay.style.visibility = 'hidden';\n                    document.body.classList.remove('modal-open');\n                }\n            }, 300);\n            \n            TopoclimbCH.events.emit('modal:closed', { modalId, modal });\n        }\n        \n        trapFocus(modal) {\n            const focusableElements = modal.querySelectorAll(\n                'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n            );\n            \n            if (focusableElements.length === 0) return;\n            \n            const firstElement = focusableElements[0];\n            const lastElement = focusableElements[focusableElements.length - 1];\n            \n            firstElement.focus();\n            \n            modal.addEventListener('keydown', (e) => {\n                if (e.key === 'Tab') {\n                    if (e.shiftKey) {\n                        if (document.activeElement === firstElement) {\n                            e.preventDefault();\n                            lastElement.focus();\n                        }\n                    } else {\n                        if (document.activeElement === lastElement) {\n                            e.preventDefault();\n                            firstElement.focus();\n                        }\n                    }\n                }\n            });\n        }\n    }\n    \n    /**\n     * 🍞 Gestionnaire de notifications toast\n     */\n    class ToastManager {\n        constructor() {\n            this.container = null;\n            this.toasts = new Map();\n            this.init();\n        }\n        \n        init() {\n            this.createContainer();\n        }\n        \n        createContainer() {\n            if (document.querySelector('.toast-container')) return;\n            \n            const container = document.createElement('div');\n            container.className = 'toast-container';\n            container.style.cssText = `\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                z-index: 10000;\n                display: flex;\n                flex-direction: column;\n                gap: 10px;\n                pointer-events: none;\n            `;\n            \n            document.body.appendChild(container);\n            this.container = container;\n        }\n        \n        show(message, type = 'info', options = {}) {\n            const {\n                duration = 5000,\n                dismissible = true,\n                persistent = false,\n                action = null\n            } = options;\n            \n            const id = utils.generateId('toast');\n            const toast = this.createToast(id, message, type, { dismissible, action });\n            \n            this.container.appendChild(toast);\n            this.toasts.set(id, toast);\n            \n            // Animation d'entrée\n            requestAnimationFrame(() => {\n                toast.classList.add('toast-show');\n            });\n            \n            // Auto-suppression\n            if (!persistent && duration > 0) {\n                setTimeout(() => {\n                    this.hide(id);\n                }, duration);\n            }\n            \n            TopoclimbCH.events.emit('toast:shown', { id, message, type });\n            \n            return id;\n        }\n        \n        createToast(id, message, type, options) {\n            const toast = document.createElement('div');\n            toast.id = id;\n            toast.className = `toast toast-${type}`;\n            toast.style.cssText = `\n                background: ${this.getTypeColor(type)};\n                color: white;\n                padding: 16px 20px;\n                border-radius: 8px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n                min-width: 300px;\n                max-width: 400px;\n                transform: translateX(100%);\n                transition: all 0.3s ease;\n                pointer-events: auto;\n                display: flex;\n                align-items: center;\n                gap: 12px;\n            `;\n            \n            // Icône\n            const icon = document.createElement('span');\n            icon.innerHTML = this.getTypeIcon(type);\n            icon.style.cssText = 'flex-shrink: 0; font-size: 18px;';\n            \n            // Message\n            const messageEl = document.createElement('span');\n            messageEl.textContent = message;\n            messageEl.style.cssText = 'flex: 1; font-size: 14px; line-height: 1.4;';\n            \n            toast.appendChild(icon);\n            toast.appendChild(messageEl);\n            \n            // Bouton de fermeture\n            if (options.dismissible) {\n                const closeBtn = document.createElement('button');\n                closeBtn.innerHTML = '×';\n                closeBtn.style.cssText = `\n                    background: none;\n                    border: none;\n                    color: white;\n                    font-size: 20px;\n                    cursor: pointer;\n                    padding: 0;\n                    width: 24px;\n                    height: 24px;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    opacity: 0.7;\n                    transition: opacity 0.2s;\n                `;\n                \n                closeBtn.addEventListener('click', () => this.hide(id));\n                closeBtn.addEventListener('mouseenter', () => closeBtn.style.opacity = '1');\n                closeBtn.addEventListener('mouseleave', () => closeBtn.style.opacity = '0.7');\n                \n                toast.appendChild(closeBtn);\n            }\n            \n            // Action personnalisée\n            if (options.action) {\n                const actionBtn = document.createElement('button');\n                actionBtn.textContent = options.action.text;\n                actionBtn.style.cssText = `\n                    background: rgba(255, 255, 255, 0.2);\n                    border: 1px solid rgba(255, 255, 255, 0.3);\n                    color: white;\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 12px;\n                    margin-left: 8px;\n                `;\n                \n                actionBtn.addEventListener('click', () => {\n                    options.action.handler();\n                    this.hide(id);\n                });\n                \n                toast.appendChild(actionBtn);\n            }\n            \n            return toast;\n        }\n        \n        hide(id) {\n            const toast = this.toasts.get(id);\n            if (!toast) return;\n            \n            toast.classList.remove('toast-show');\n            toast.style.transform = 'translateX(100%)';\n            \n            setTimeout(() => {\n                if (toast.parentNode) {\n                    toast.parentNode.removeChild(toast);\n                }\n                this.toasts.delete(id);\n            }, 300);\n            \n            TopoclimbCH.events.emit('toast:hidden', { id });\n        }\n        \n        getTypeColor(type) {\n            const colors = {\n                success: '#10b981',\n                error: '#ef4444',\n                warning: '#f59e0b',\n                info: '#3b82f6'\n            };\n            return colors[type] || colors.info;\n        }\n        \n        getTypeIcon(type) {\n            const icons = {\n                success: '✓',\n                error: '✕',\n                warning: '⚠',\n                info: 'ℹ'\n            };\n            return icons[type] || icons.info;\n        }\n        \n        // Méthodes de raccourci\n        success(message, options) {\n            return this.show(message, 'success', options);\n        }\n        \n        error(message, options) {\n            return this.show(message, 'error', { duration: 8000, ...options });\n        }\n        \n        warning(message, options) {\n            return this.show(message, 'warning', options);\n        }\n        \n        info(message, options) {\n            return this.show(message, 'info', options);\n        }\n        \n        clear() {\n            this.toasts.forEach((toast, id) => this.hide(id));\n        }\n    }\n    \n    /**\n     * 🖼️ Gestionnaire de lightbox\n     */\n    class LightboxManager {\n        constructor() {\n            this.isOpen = false;\n            this.currentIndex = 0;\n            this.images = [];\n            this.init();\n        }\n        \n        init() {\n            this.bindEvents();\n        }\n        \n        bindEvents() {\n            document.addEventListener('click', (e) => {\n                const trigger = e.target.closest('[data-lightbox]');\n                if (trigger) {\n                    e.preventDefault();\n                    this.open(trigger);\n                }\n            });\n        }\n        \n        open(trigger) {\n            const group = trigger.dataset.lightbox;\n            this.images = Array.from(document.querySelectorAll(`[data-lightbox=\"${group}\"]`));\n            this.currentIndex = this.images.indexOf(trigger);\n            \n            this.createLightbox();\n            this.showImage(this.currentIndex);\n            this.isOpen = true;\n            \n            document.body.classList.add('lightbox-open');\n        }\n        \n        createLightbox() {\n            if (document.querySelector('.lightbox')) return;\n            \n            const lightbox = document.createElement('div');\n            lightbox.className = 'lightbox';\n            lightbox.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.9);\n                z-index: 10001;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                opacity: 0;\n                transition: opacity 0.3s ease;\n            `;\n            \n            lightbox.innerHTML = `\n                <div class=\"lightbox-content\" style=\"\n                    position: relative;\n                    max-width: 90vw;\n                    max-height: 90vh;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                \">\n                    <img class=\"lightbox-image\" style=\"\n                        max-width: 100%;\n                        max-height: 100%;\n                        object-fit: contain;\n                        border-radius: 8px;\n                    \">\n                    <button class=\"lightbox-close\" style=\"\n                        position: absolute;\n                        top: -40px;\n                        right: 0;\n                        background: none;\n                        border: none;\n                        color: white;\n                        font-size: 30px;\n                        cursor: pointer;\n                        width: 40px;\n                        height: 40px;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                    \">×</button>\n                    <button class=\"lightbox-prev\" style=\"\n                        position: absolute;\n                        left: -60px;\n                        top: 50%;\n                        transform: translateY(-50%);\n                        background: rgba(255, 255, 255, 0.1);\n                        border: none;\n                        color: white;\n                        font-size: 24px;\n                        cursor: pointer;\n                        width: 50px;\n                        height: 50px;\n                        border-radius: 50%;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                    \">‹</button>\n                    <button class=\"lightbox-next\" style=\"\n                        position: absolute;\n                        right: -60px;\n                        top: 50%;\n                        transform: translateY(-50%);\n                        background: rgba(255, 255, 255, 0.1);\n                        border: none;\n                        color: white;\n                        font-size: 24px;\n                        cursor: pointer;\n                        width: 50px;\n                        height: 50px;\n                        border-radius: 50%;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                    \">›</button>\n                    <div class=\"lightbox-counter\" style=\"\n                        position: absolute;\n                        bottom: -40px;\n                        left: 50%;\n                        transform: translateX(-50%);\n                        color: white;\n                        font-size: 14px;\n                    \"></div>\n                </div>\n            `;\n            \n            document.body.appendChild(lightbox);\n            \n            // Événements\n            lightbox.querySelector('.lightbox-close').addEventListener('click', () => this.close());\n            lightbox.querySelector('.lightbox-prev').addEventListener('click', () => this.prev());\n            lightbox.querySelector('.lightbox-next').addEventListener('click', () => this.next());\n            \n            lightbox.addEventListener('click', (e) => {\n                if (e.target === lightbox) this.close();\n            });\n            \n            document.addEventListener('keydown', (e) => {\n                if (!this.isOpen) return;\n                \n                switch (e.key) {\n                    case 'Escape':\n                        this.close();\n                        break;\n                    case 'ArrowLeft':\n                        this.prev();\n                        break;\n                    case 'ArrowRight':\n                        this.next();\n                        break;\n                }\n            });\n            \n            // Animation d'entrée\n            requestAnimationFrame(() => {\n                lightbox.style.opacity = '1';\n            });\n        }\n        \n        showImage(index) {\n            const lightbox = document.querySelector('.lightbox');\n            const image = lightbox.querySelector('.lightbox-image');\n            const counter = lightbox.querySelector('.lightbox-counter');\n            const prev = lightbox.querySelector('.lightbox-prev');\n            const next = lightbox.querySelector('.lightbox-next');\n            \n            const trigger = this.images[index];\n            const src = trigger.href || trigger.dataset.src || trigger.src;\n            \n            image.src = src;\n            counter.textContent = `${index + 1} / ${this.images.length}`;\n            \n            prev.style.display = this.images.length > 1 ? 'flex' : 'none';\n            next.style.display = this.images.length > 1 ? 'flex' : 'none';\n        }\n        \n        prev() {\n            this.currentIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;\n            this.showImage(this.currentIndex);\n        }\n        \n        next() {\n            this.currentIndex = (this.currentIndex + 1) % this.images.length;\n            this.showImage(this.currentIndex);\n        }\n        \n        close() {\n            const lightbox = document.querySelector('.lightbox');\n            if (!lightbox) return;\n            \n            lightbox.style.opacity = '0';\n            \n            setTimeout(() => {\n                lightbox.remove();\n                this.isOpen = false;\n                document.body.classList.remove('lightbox-open');\n            }, 300);\n        }\n    }\n    \n    // Instances globales\n    const modal = new ModalManager();\n    const toast = new ToastManager();\n    const lightbox = new LightboxManager();\n    \n    // Ajout de styles CSS automatiques\n    const style = document.createElement('style');\n    style.textContent = `\n        .modal-open { overflow: hidden; }\n        .toast-show { transform: translateX(0) !important; }\n        .lightbox-open { overflow: hidden; }\n    `;\n    document.head.appendChild(style);\n    \n    // Exposer dans le namespace global\n    const UI = {\n        modal,\n        toast,\n        lightbox,\n        ModalManager,\n        ToastManager,\n        LightboxManager\n    };\n    \n    TopoclimbCH.ui = UI;\n    \n    return UI;\n});\n\nconsole.log('🎨 TopoclimbCH UI module ready');