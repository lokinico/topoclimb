class ViewManager { constructor(containerSelector = '.entities-container') { this.container = document.querySelector(containerSelector); this.currentView = null; if (!this.container) { return; } this.detectInitialView(); this.init(); } detectInitialView() { const activeView = this.container.querySelector('.view-grid.active, .view-list.active, .view-compact.active'); if (activeView) { if (activeView.classList.contains('view-grid')) { this.currentView = 'grid'; } else if (activeView.classList.contains('view-list')) { this.currentView = 'list'; } else if (activeView.classList.contains('view-compact')) { this.currentView = 'compact'; } } else { this.currentView = 'grid'; } } init() { const views = this.container.querySelectorAll('.view-grid, .view-list, .view-compact'); views.forEach((view, i) => { const computed = window.getComputedStyle(view); }); this.setupViewControls(); this.loadSavedView(); this.setupQuickActions(); } setupViewControls() { const viewControls = document.querySelectorAll('[data-view]'); viewControls.forEach((control, index) => { control.removeEventListener('click', this.handleViewChange); control.addEventListener('click', (e) => { e.preventDefault(); const viewType = control.dataset.view; this.switchView(viewType); this.updateActiveButton(control); }); }); } switchView(viewType) { if (!['grid', 'list', 'compact'].includes(viewType)) { return; } if (this.currentView === viewType) { return; } const allViews = this.container.querySelectorAll('.view-grid, .view-list, .view-compact'); allViews.forEach((view) => { view.classList.remove('active'); view.style.display = 'none'; }); const targetView = this.container.querySelector(`.view-${viewType}`); if (targetView) { targetView.classList.add('active'); if (viewType === 'grid') { targetView.style.display = 'grid'; } else { targetView.style.display = 'block'; } const finalComputed = window.getComputedStyle(targetView); } else { } this.currentView = viewType; this.saveViewPreference(viewType); } updateActiveButton(activeButton) { document.querySelectorAll('[data-view]').forEach(btn => { btn.classList.remove('active'); }); activeButton.classList.add('active'); } saveViewPreference(viewType) { try { localStorage.setItem('topoclimb_view_preference', viewType); } catch (e) { } } loadSavedView() { try { const savedView = localStorage.getItem('topoclimb_view_preference'); if (savedView && ['grid', 'list', 'compact'].includes(savedView)) { if (savedView !== this.currentView) { this.switchView(savedView); } else { } const button = document.querySelector(`[data-view="${savedView}"]`); if (button) { this.updateActiveButton(button); } } else { const currentButton = document.querySelector(`[data-view="${this.currentView}"]`); if (currentButton) { this.updateActiveButton(currentButton); } } } catch (e) { } } setupQuickActions() { document.addEventListener('click', (e) => { if (e.target.closest('[data-action="weather"]')) { const button = e.target.closest('[data-action="weather"]'); const entityId = button.dataset.id; this.handleWeatherAction(entityId); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="map"]')) { const button = e.target.closest('[data-action="map"]'); const entityId = button.dataset.id; this.handleMapAction(entityId); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="gps"]')) { const button = e.target.closest('[data-action="gps"]'); const entityId = button.dataset.id; this.handleGpsAction(entityId); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="favorite"]')) { const button = e.target.closest('[data-action="favorite"]'); const entityId = button.dataset.id; this.handleFavoriteAction(entityId, button); } }); document.addEventListener('click', (e) => { if (e.target.closest('[data-action="share"]')) { const button = e.target.closest('[data-action="share"]'); const entityId = button.dataset.id; this.handleShareAction(entityId); } }); } handleWeatherAction(entityId) { this.showToast('Météo en cours de chargement...', 'info'); setTimeout(() => { this.showToast('Fonctionnalité météo bientôt disponible', 'warning'); }, 1000); } handleMapAction(entityId) { this.showToast('Ouverture de la carte...', 'info'); setTimeout(() => { this.showToast('Fonctionnalité carte bientôt disponible', 'warning'); }, 1000); } handleGpsAction(entityId) { this.showToast('Ouverture GPS Navigation...', 'info'); setTimeout(() => { this.showToast('Fonctionnalité GPS bientôt disponible', 'warning'); }, 1000); } handleShareAction(entityId) { if (navigator.share) { navigator.share({ title: 'TopoclimbCH', text: 'Découvrez ce contenu sur TopoclimbCH', url: window.location.href }).then(() => { this.showToast('Partagé avec succès', 'success'); }).catch(() => { this.copyToClipboard(); }); } else { this.copyToClipboard(); } } copyToClipboard() { if (navigator.clipboard) { navigator.clipboard.writeText(window.location.href).then(() => { this.showToast('URL copiée dans le presse-papier', 'success'); }).catch(() => { this.showToast('Impossible de copier l\'URL', 'error'); }); } else { const textArea = document.createElement('textarea'); textArea.value = window.location.href; document.body.appendChild(textArea); textArea.select(); try { document.execCommand('copy'); this.showToast('URL copiée dans le presse-papier', 'success'); } catch (err) { this.showToast('Impossible de copier l\'URL', 'error'); } document.body.removeChild(textArea); } } handleFavoriteAction(entityId, button) { const isFavorite = button.classList.contains('favorited'); if (isFavorite) { button.classList.remove('favorited'); button.innerHTML = '<i class="fas fa-heart"></i>'; this.showToast('Retiré des favoris', 'success'); } else { button.classList.add('favorited'); button.innerHTML = '<i class="fas fa-heart text-danger"></i>'; this.showToast('Ajouté aux favoris', 'success'); } } showToast(message, type = 'info') { const toast = document.createElement('div'); toast.className = `toast-notification toast-${type}`; toast.textContent = message; Object.assign(toast.style, { position: 'fixed', top: '20px', right: '20px', padding: '12px 20px', borderRadius: '8px', color: 'white', fontWeight: '500', zIndex: '9999', transform: 'translateX(100%)', transition: 'transform 0.3s ease', maxWidth: '300px' }); const colors = { info: '#17a2b8', success: '#28a745', warning: '#ffc107', error: '#dc3545' }; toast.style.backgroundColor = colors[type] || colors.info; document.body.appendChild(toast); setTimeout(() => { toast.style.transform = 'translateX(0)'; }, 100); setTimeout(() => { toast.style.transform = 'translateX(100%)'; setTimeout(() => { if (toast.parentNode) { toast.parentNode.removeChild(toast); } }, 300); }, 3000); } } document.addEventListener('DOMContentLoaded', () => { setTimeout(() => { const selectors = [ '.regions-container', '.sites-container', '.sectors-container', '.routes-container', '.books-container', '.entities-container' ]; let found = false; selectors.forEach(selector => { const container = document.querySelector(selector); if (container) { window.viewManager = new ViewManager(selector); found = true; const buttons = document.querySelectorAll('[data-view]'); buttons.forEach((btn, i) => { }); } }); if (!found) { } }, 100); }); window.ViewManager = ViewManager;