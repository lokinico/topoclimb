<?php
/**
 * Script de nettoyage automatique TopoclimbCH
 * √Ä configurer dans le gestionnaire de t√¢ches Plesk
 * 
 * Commande Plesk : php /chemin/vers/auto-cleanup.php
 * Fr√©quence recommand√©e : Toutes les heures
 */

// Configuration
$maxSessionAge = 86400;  // 24h en secondes
$maxLogAge = 604800;     // 7 jours en secondes

// D√©but du rapport
echo "üßπ NETTOYAGE AUTOMATIQUE TopoclimbCH\n";
echo "====================================\n";
echo "Heure: " . date('Y-m-d H:i:s') . "\n";
echo "PID: " . getmypid() . "\n\n";

$totalCleaned = 0;
$errors = [];

try {
    // 1. Cache Twig (le plus important)
    echo "1. Nettoyage cache Twig...\n";
    $cacheDir = __DIR__ . '/storage/cache';
    if (is_dir($cacheDir)) {
        $cacheFiles = glob($cacheDir . '/*');
        $cacheCleaned = 0;
        foreach ($cacheFiles as $file) {
            if (is_file($file)) {
                if (unlink($file)) {
                    $cacheCleaned++;
                } else {
                    $errors[] = "Impossible de supprimer: $file";
                }
            }
        }
        echo "   ‚úÖ $cacheCleaned fichiers cache supprim√©s\n";
        $totalCleaned += $cacheCleaned;
    } else {
        echo "   ‚ö†Ô∏è Dossier cache introuvable\n";
    }

    // 2. Sessions anciennes
    echo "2. Nettoyage sessions anciennes...\n";
    $sessionDir = __DIR__ . '/storage/sessions';
    if (is_dir($sessionDir)) {
        $sessionFiles = glob($sessionDir . '/sess_*');
        $sessionsRemoved = 0;
        foreach ($sessionFiles as $file) {
            if (is_file($file) && filemtime($file) < (time() - $maxSessionAge)) {
                if (unlink($file)) {
                    $sessionsRemoved++;
                } else {
                    $errors[] = "Session non supprimable: $file";
                }
            }
        }
        echo "   ‚úÖ $sessionsRemoved sessions expir√©es supprim√©es\n";
        $totalCleaned += $sessionsRemoved;
    } else {
        echo "   ‚ö†Ô∏è Dossier sessions introuvable\n";
    }

    // 3. OPCache PHP (crucial apr√®s d√©ploiement)
    echo "3. Reset OPCache PHP...\n";
    if (function_exists('opcache_reset')) {
        if (opcache_reset()) {
            echo "   ‚úÖ OPCache reset√©\n";
        } else {
            echo "   ‚ö†Ô∏è √âchec reset OPCache\n";
            $errors[] = "OPCache reset failed";
        }
    } else {
        echo "   ‚ö†Ô∏è OPCache non disponible\n";
    }

    // 4. Logs anciens
    echo "4. Nettoyage logs anciens...\n";
    $logDir = __DIR__ . '/storage/logs';
    if (is_dir($logDir)) {
        $logFiles = glob($logDir . '/*.log');
        $logsRemoved = 0;
        foreach ($logFiles as $file) {
            if (is_file($file) && filemtime($file) < (time() - $maxLogAge)) {
                if (unlink($file)) {
                    $logsRemoved++;
                } else {
                    $errors[] = "Log non supprimable: $file";
                }
            }
        }
        if ($logsRemoved > 0) {
            echo "   ‚úÖ $logsRemoved logs anciens supprim√©s\n";
        } else {
            echo "   ‚ÑπÔ∏è Aucun log ancien √† supprimer\n";
        }
        $totalCleaned += $logsRemoved;
    } else {
        echo "   ‚ö†Ô∏è Dossier logs introuvable\n";
    }

    // 5. Nettoyage uploads temporaires (optionnel)
    echo "5. Nettoyage uploads temporaires...\n";
    $uploadDir = __DIR__ . '/storage/uploads';
    if (is_dir($uploadDir)) {
        $tempFiles = glob($uploadDir . '/tmp_*');
        $tempRemoved = 0;
        foreach ($tempFiles as $file) {
            if (is_file($file) && filemtime($file) < (time() - 3600)) { // 1h
                if (unlink($file)) {
                    $tempRemoved++;
                }
            }
        }
        if ($tempRemoved > 0) {
            echo "   ‚úÖ $tempRemoved fichiers temporaires supprim√©s\n";
        } else {
            echo "   ‚ÑπÔ∏è Aucun fichier temporaire √† supprimer\n";
        }
        $totalCleaned += $tempRemoved;
    } else {
        echo "   ‚ÑπÔ∏è Dossier uploads introuvable\n";
    }

} catch (Exception $e) {
    $errors[] = "Erreur g√©n√©rale: " . $e->getMessage();
    echo "‚ùå ERREUR: " . $e->getMessage() . "\n";
}

// 6. Statistiques finales
echo "\nüìä R√âSUM√â:\n";
echo "==========\n";
echo "Total nettoy√©: $totalCleaned √©l√©ments\n";
echo "Erreurs: " . count($errors) . "\n";

if (!empty($errors)) {
    echo "\n‚ö†Ô∏è ERREURS D√âTECT√âES:\n";
    foreach ($errors as $error) {
        echo "   ‚Ä¢ $error\n";
    }
}

// 7. Enregistrer l'ex√©cution
$logEntry = sprintf(
    "[%s] Nettoyage: %d √©l√©ments, %d erreurs\n",
    date('Y-m-d H:i:s'),
    $totalCleaned,
    count($errors)
);

file_put_contents(__DIR__ . '/cleanup.log', $logEntry, FILE_APPEND | LOCK_EX);

// 8. Marquer la derni√®re ex√©cution
file_put_contents(__DIR__ . '/last-cleanup.txt', date('Y-m-d H:i:s'));

echo "\nüéØ NETTOYAGE TERMIN√â\n";
echo "Next run: " . date('Y-m-d H:i:s', time() + 3600) . "\n";
echo "Log: cleanup.log\n";

// Code de sortie
exit(count($errors) > 0 ? 1 : 0);
?>