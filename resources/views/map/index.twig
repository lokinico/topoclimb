{# CACHE BUST: 2025-07-22 12:39:05 - 687f8669e0530 #}
{% extends "layouts/fullscreen.twig" %}

{% block title %}Carte Interactive - Sites d'Escalade Suisse{% endblock %}

{% block description %}D√©couvrez tous les sites d'escalade de Suisse sur notre carte interactive avec localisation pr√©cise{% endblock %}

{% block styles %}
<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<style>
/* CSS sp√©cifique carte - compatible avec layout fullscreen */
#climbing-map {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
}

/* Status overlay */
.map-status {
    position: absolute;
    bottom: 20px;
    left: 20px;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    padding: 10px 15px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    font-size: 14px;
    max-width: 250px;
}

/* Contr√¥les carte */
.map-controls {
    position: absolute;
    top: 70px;
    right: 20px;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.control-group {
    display: flex;
    flex-direction: column;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.control-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: transparent;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    transition: all 0.2s;
}

.control-btn:hover {
    background: rgba(0, 0, 0, 0.05);
    color: #333;
}

/* Responsive */
@media (max-width: 768px) {
    .map-controls {
        top: 60px;
        right: 15px;
    }
    
    .control-btn {
        width: 36px;
        height: 36px;
        font-size: 14px;
    }
    
    .map-status {
        bottom: 15px;
        left: 15px;
        font-size: 13px;
    }
}
</style>
{% endblock %}

{% block header_controls %}
<!-- Controls sp√©cifiques √† la carte -->
<a href="{{ url('/regions') }}" class="header-btn">
    <i class="fas fa-list"></i> Liste
</a>
<a href="{{ url('/sites') }}" class="header-btn">
    <i class="fas fa-mountain"></i> Sites
</a>
{% endblock %}

{% block content %}
<!-- Carte principale -->
<div id="climbing-map"></div>

<!-- Contr√¥les flottants -->
<div class="map-controls">
    <div class="control-group">
        <button id="locate-btn" class="control-btn" title="Ma position">
            <i class="fas fa-crosshairs"></i>
        </button>
        <button id="layers-btn" class="control-btn" title="Changer fond">
            <i class="fas fa-layer-group"></i>
        </button>
    </div>
    
    <div class="control-group">
        <button id="zoom-in" class="control-btn" title="Zoom +">
            <i class="fas fa-plus"></i>
        </button>
        <button id="zoom-out" class="control-btn" title="Zoom -">
            <i class="fas fa-minus"></i>
        </button>
    </div>
</div>

<!-- Status -->
<div class="map-status">
    <div><strong>üó∫Ô∏è Carte Escalade</strong></div>
    <div>Status: <span id="status">Chargement...</span></div>
    <div>Sites: <span id="site-count">0</span></div>
</div>
{% endblock %}

{% block scripts %}
<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
console.log('üó∫Ô∏è Carte TopoclimbCH - Version int√©gr√©e');

// Configuration
const SWISS_CENTER = [46.8182, 8.2275];
let map = null;
let currentLayer = 'osm';
let sitesData = [];

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    initializeMap();
    loadSitesData();
    setupControls();
});

function initializeMap() {
    console.log('Initialisation carte...');
    document.getElementById('status').textContent = 'Cr√©ation carte...';
    
    // Cr√©er la carte
    map = L.map('climbing-map', {
        center: SWISS_CENTER,
        zoom: 8,
        zoomControl: false,
        attributionControl: false
    });
    
    // Ajouter les tuiles
    addMapLayers();
    
    console.log('‚úÖ Carte initialis√©e');
}

function addMapLayers() {
    document.getElementById('status').textContent = 'Chargement tuiles...';
    
    // Tuiles OpenStreetMap
    const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);
    
    // Stocker les couches
    window.mapLayers = {
        osm: osmLayer,
        satellite: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            maxZoom: 18,
            attribution: '¬© Esri'
        })
    };
    
    console.log('‚úÖ Tuiles ajout√©es');
    document.getElementById('status').textContent = 'Tuiles charg√©es';
}

function loadSitesData() {
    document.getElementById('status').textContent = 'Chargement sites...';
    
    // Charger depuis l'API
    fetch('/api/sites')
        .then(response => response.json())
        .then(data => {
            sitesData = data.data || [];
            console.log('Sites charg√©s:', sitesData.length);
            
            if (sitesData.length > 0) {
                addSiteMarkers();
            } else {
                // Marqueur test si pas de donn√©es
                addTestMarker();
            }
            
            document.getElementById('site-count').textContent = sitesData.length;
            document.getElementById('status').textContent = 'Sites charg√©s';
        })
        .catch(error => {
            console.error('Erreur chargement sites:', error);
            document.getElementById('status').textContent = 'Erreur donn√©es';
            addTestMarker();
        });
}

function addSiteMarkers() {
    sitesData.forEach(site => {
        const lat = site.coordinates_lat;
        const lng = site.coordinates_lng;
        
        if (lat && lng) {
            const marker = L.circleMarker([lat, lng], {
                radius: 8,
                fillColor: '#e74c3c',
                color: '#ffffff',
                weight: 2,
                opacity: 1,
                fillOpacity: 0.8
            }).addTo(map);
            
            marker.bindPopup(`
                <div>
                    <h6>${site.name}</h6>
                    <p class="small text-muted">${site.region_name || 'R√©gion inconnue'}</p>
                    <p class="small">${site.description || ''}</p>
                </div>
            `);
        }
    });
}

function addTestMarker() {
    // Marqueur test si pas de donn√©es r√©elles
    L.marker([46.1817, 7.1947])
        .addTo(map)
        .bindPopup('<div><h6>üèîÔ∏è Saillon</h6><p>Site d\'escalade de test</p></div>')
        .openPopup();
}

function setupControls() {
    // G√©olocalisation
    document.getElementById('locate-btn').addEventListener('click', () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                position => {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    map.setView([lat, lng], 12);
                    
                    L.circleMarker([lat, lng], {
                        radius: 10,
                        fillColor: '#3b82f6',
                        color: '#ffffff',
                        weight: 3,
                        fillOpacity: 1
                    }).addTo(map).bindPopup('Votre position');
                },
                () => alert('G√©olocalisation impossible')
            );
        }
    });
    
    // Changement de couches
    document.getElementById('layers-btn').addEventListener('click', () => {
        const layers = window.mapLayers;
        map.removeLayer(layers[currentLayer]);
        
        currentLayer = currentLayer === 'osm' ? 'satellite' : 'osm';
        layers[currentLayer].addTo(map);
        
        console.log('Couche chang√©e:', currentLayer);
    });
    
    // Zoom
    document.getElementById('zoom-in').addEventListener('click', () => map.zoomIn());
    document.getElementById('zoom-out').addEventListener('click', () => map.zoomOut());
}
</script>
{% endblock %}