{% extends "layouts/app.twig" %}

{% block title %}Carte Interactive - Sites d'Escalade Suisse{% endblock %}

{% block meta %}
    <meta name="description" content="Découvrez tous les sites d'escalade de Suisse sur notre carte interactive moderne avec les tuiles officielles suisses.">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
          crossorigin="" />
    
    <!-- CSS moderne pour la carte -->
    <link rel="stylesheet" href="/css/pages/map.css">
{% endblock %}

{% block content %}
<div class="map-page-modern">
    <!-- Header moderne avec statistiques -->
    <header class="map-header">
        <div class="container">
            <div class="header-content">
                <div class="header-text">
                    <h1 class="map-title">
                        <i class="fas fa-mountain"></i>
                        Carte Interactive des Sites d'Escalade
                    </h1>
                    <p class="map-subtitle">
                        Explorez {{ stats.total_sites ?? 0 }} sites d'escalade en Suisse avec les cartes officielles swisstopo
                    </p>
                </div>
            </div>
        </div>
    </header>

    <!-- Interface principale -->
    <div class="map-interface">
        <!-- Panneau de contrôles -->
        <aside class="control-panel">
            <!-- Recherche -->
            <div class="search-section">
                <div class="search-box">
                    <input type="text" id="site-search" placeholder="Rechercher un site..." 
                           autocomplete="off" class="search-input">
                    <button id="search-btn" class="search-btn">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            <!-- Filtres -->
            <div class="filters-section">
                <h3>Filtres</h3>
                <div class="filter-group">
                    <label for="region-filter">Région</label>
                    <select id="region-filter" class="filter-select">
                        <option value="">Toutes les régions</option>
                        {% for region in regions %}
                            <option value="{{ region.id ?? region['id'] }}">{{ region.name ?? region['name'] }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="type-filter">Type</label>
                    <select id="type-filter" class="filter-select">
                        <option value="">Tous types</option>
                        <option value="sport">Sport</option>
                        <option value="trad">Traditionnel</option>
                        <option value="boulder">Bloc</option>
                    </select>
                </div>

                <button id="reset-filters" class="reset-btn">
                    <i class="fas fa-refresh"></i>
                    Réinitialiser
                </button>
            </div>

            <!-- Actions rapides -->
            <div class="actions-section">
                <button id="locate-btn" class="action-btn primary">
                    <i class="fas fa-location-arrow"></i>
                    Ma position
                </button>
                
                <button id="fullscreen-btn" class="action-btn secondary">
                    <i class="fas fa-expand"></i>
                    Plein écran
                </button>
                
                <button id="layers-btn" class="action-btn secondary">
                    <i class="fas fa-layer-group"></i>
                    Changer fond
                </button>
            </div>

            <!-- Légende -->
            <div class="legend-section">
                <h3>Légende</h3>
                <div class="legend-items">
                    <div class="legend-item">
                        <div class="legend-color sport"></div>
                        <span>Escalade sportive</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color trad"></div>
                        <span>Escalade traditionnelle</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color boulder"></div>
                        <span>Bloc</span>
                    </div>
                </div>
            </div>
        </aside>

        <!-- Carte principale -->
        <main class="map-main">
            <div id="climbing-map" class="map-container">
                <!-- Indicateur de chargement -->
                <div id="loading-indicator" class="loading-overlay">
                    <div class="loading-spinner"></div>
                    <p>Chargement de la carte...</p>
                </div>
            </div>

            <!-- Contrôles flottants -->
            <div class="floating-controls">
                <button id="zoom-in" class="control-btn" title="Zoom avant">
                    <i class="fas fa-plus"></i>
                </button>
                <button id="zoom-out" class="control-btn" title="Zoom arrière">
                    <i class="fas fa-minus"></i>
                </button>
                <button id="center-switzerland" class="control-btn" title="Centrer sur la Suisse">
                    <i class="fas fa-home"></i>
                </button>
            </div>

            <!-- Panneau d'informations -->
            <div id="info-panel" class="info-panel">
                <div class="info-header">
                    <h3 id="info-title">Informations</h3>
                    <button id="info-close" class="close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="info-content" class="info-content">
                    <!-- Contenu dynamique -->
                </div>
            </div>
        </main>
    </div>
</div>

<!-- Modal pour détails complets -->
<div id="site-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="modal-title">Détails du site</h3>
            <button id="modal-close" class="modal-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="modal-body" class="modal-body">
            <!-- Contenu chargé dynamiquement -->
        </div>
    </div>
</div>

<!-- Notifications toast -->
<div id="toast-container" class="toast-container"></div>
{% endblock %}

{% block scripts %}
<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" 
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" 
        crossorigin=""></script>

<script>
// Configuration pour la Suisse
const MapConfig = {
    center: [46.8182, 8.2275], // Centre de la Suisse
    zoom: 8,
    minZoom: 6,
    maxZoom: 18,
    bounds: [[45.8, 5.9], [47.9, 10.5]] // Limites approximatives de la Suisse
};

// Données des sites depuis le serveur
const siteData = {{ sites|json_encode|raw }};
const regionData = {{ regions|json_encode|raw }};

// Variables globales
let map = null;
let markersLayer = null;
let currentLayer = 'osm'; // Commencer avec OSM qui est plus stable
let userLocationMarker = null;
let filteredSites = siteData;

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    initializeMap();
    initializeControls();
    initializeEventListeners();
    hideLoading();
});

// === INITIALISATION CARTE ===
function initializeMap() {
    // Créer la carte
    map = L.map('climbing-map', {
        center: MapConfig.center,
        zoom: MapConfig.zoom,
        minZoom: MapConfig.minZoom,
        maxZoom: MapConfig.maxZoom,
        maxBounds: MapConfig.bounds,
        maxBoundsViscosity: 1.0,
        zoomControl: false
    });

    // Ajouter les tuiles avec gestion d'erreur
    try {
        addMapLayers();
    } catch (error) {
        console.error('Erreur lors de l\'ajout des couches:', error);
        showToast('Erreur lors du chargement des cartes', 'error');
    }
    
    // Ajouter les marqueurs
    try {
        addSiteMarkers();
    } catch (error) {
        console.error('Erreur lors de l\'ajout des marqueurs:', error);
        showToast('Erreur lors du chargement des sites', 'error');
    }
    
    console.log('Carte initialisée avec', siteData.length, 'sites');
}

function addMapLayers() {
    // Couche principale simplifiée : OpenStreetMap (plus stable)
    const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 18
    });

    // Couche Swiss topo (simplifiée et plus stable)
    const swissLayer = L.tileLayer('https://wmts.geo.admin.ch/1.0.0/ch.swisstopo.pixelkarte-farbe/default/current/3857/{z}/{x}/{y}.jpeg', {
        attribution: '&copy; <a href="https://www.swisstopo.admin.ch/">swisstopo</a>',
        maxZoom: 16, // Limiter le zoom pour éviter les tuiles manquantes
        errorTileUrl: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', // Fallback vers OSM
        crossOrigin: true,
        timeout: 10000 // Timeout pour éviter les tuiles qui restent en chargement
    });

    // Couche satellite simplifiée
    const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: '&copy; <a href="https://www.esri.com/">Esri</a>',
        maxZoom: 18
    });

    // Stocker les couches
    window.mapLayers = {
        osm: osmLayer,
        swisstopo: swissLayer,
        satellite: satelliteLayer
    };

    // Ajouter la couche par défaut (OSM plus stable)
    osmLayer.addTo(map);
    
    // Ajouter les événements de chargement de tuiles
    osmLayer.on('loading', function() {
        console.log('Chargement des tuiles OSM...');
    });
    
    osmLayer.on('load', function() {
        console.log('Tuiles OSM chargées avec succès');
    });
    
    swissLayer.on('tileerror', function(error) {
        console.warn('Erreur de tuile Swiss:', error);
    });
}

function addSiteMarkers() {
    markersLayer = L.layerGroup().addTo(map);
    updateMarkers();
}

function updateMarkers() {
    markersLayer.clearLayers();
    
    filteredSites.forEach(site => {
        if (site.latitude && site.longitude) {
            const marker = createSiteMarker(site);
            markersLayer.addLayer(marker);
        }
    });
}

function createSiteMarker(site) {
    // Déterminer le type de site (par défaut: sport)
    const siteType = determineSiteType(site);
    
    // Créer l'icône moderne
    const icon = L.divIcon({
        className: 'site-marker',
        html: `<div class="marker-icon ${siteType}">
                 <i class="fas fa-mountain"></i>
                 <div class="marker-pulse"></div>
               </div>`,
        iconSize: [32, 32],
        iconAnchor: [16, 16],
        popupAnchor: [0, -16]
    });

    // Créer le marqueur
    const marker = L.marker([site.latitude, site.longitude], { icon: icon });

    // Popup moderne
    const popupContent = createPopupContent(site);
    marker.bindPopup(popupContent, {
        maxWidth: 300,
        className: 'modern-popup'
    });

    // Événements
    marker.on('click', function() {
        showSiteInfo(site);
    });

    return marker;
}

function createPopupContent(site) {
    return `
        <div class="popup-content">
            <h4>${site.name}</h4>
            <div class="popup-info">
                <div class="info-row">
                    <i class="fas fa-map-marker-alt"></i>
                    <span>${site.region_name || 'Région inconnue'}</span>
                </div>
                <div class="info-row">
                    <i class="fas fa-route"></i>
                    <span>${site.route_count || 0} voies</span>
                </div>
                <div class="info-row">
                    <i class="fas fa-layer-group"></i>
                    <span>${site.sector_count || 0} secteurs</span>
                </div>
                ${site.approach_time ? `
                <div class="info-row">
                    <i class="fas fa-clock"></i>
                    <span>Approche: ${site.approach_time} min</span>
                </div>` : ''}
            </div>
            <div class="popup-actions">
                <button onclick="showSiteDetails(${site.id})" class="btn-primary">
                    <i class="fas fa-eye"></i> Voir détails
                </button>
                <button onclick="getDirections(${site.latitude}, ${site.longitude})" class="btn-secondary">
                    <i class="fas fa-directions"></i> Itinéraire
                </button>
            </div>
        </div>
    `;
}

function determineSiteType(site) {
    // Logique simple pour déterminer le type
    // TODO: Améliorer avec les vraies données
    return 'sport';
}

// === CONTRÔLES ===
function initializeControls() {
    // Recherche
    const searchInput = document.getElementById('site-search');
    const searchBtn = document.getElementById('search-btn');
    
    searchBtn.addEventListener('click', () => performSearch(searchInput.value));
    searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') performSearch(searchInput.value);
    });

    // Filtres
    document.getElementById('region-filter').addEventListener('change', applyFilters);
    document.getElementById('type-filter').addEventListener('change', applyFilters);
    document.getElementById('reset-filters').addEventListener('click', resetFilters);

    // Actions
    document.getElementById('locate-btn').addEventListener('click', locateUser);
    document.getElementById('fullscreen-btn').addEventListener('click', toggleFullscreen);
    document.getElementById('layers-btn').addEventListener('click', switchLayer);
    document.getElementById('center-switzerland').addEventListener('click', centerOnSwitzerland);
}

function initializeEventListeners() {
    // Contrôles de zoom
    document.getElementById('zoom-in').addEventListener('click', () => map.zoomIn());
    document.getElementById('zoom-out').addEventListener('click', () => map.zoomOut());

    // Fermeture des modals
    document.getElementById('modal-close').addEventListener('click', closeModal);
    document.getElementById('info-close').addEventListener('click', closeInfoPanel);

    // Fermeture en cliquant à l'extérieur
    document.getElementById('site-modal').addEventListener('click', (e) => {
        if (e.target.id === 'site-modal') closeModal();
    });

    // Responsivité
    window.addEventListener('resize', () => {
        if (map) setTimeout(() => map.invalidateSize(), 100);
    });
}

// === FONCTIONS DE RECHERCHE ET FILTRAGE ===
function performSearch(query) {
    if (!query.trim()) {
        showToast('Veuillez entrer un terme de recherche', 'warning');
        return;
    }

    const results = siteData.filter(site => 
        site.name.toLowerCase().includes(query.toLowerCase()) ||
        (site.region_name && site.region_name.toLowerCase().includes(query.toLowerCase()))
    );

    if (results.length === 0) {
        showToast(`Aucun site trouvé pour "${query}"`, 'info');
        return;
    }

    // Centrer sur le premier résultat
    const firstResult = results[0];
    map.setView([firstResult.latitude, firstResult.longitude], 12);

    // Ouvrir sa popup
    markersLayer.eachLayer(layer => {
        const latLng = layer.getLatLng();
        if (Math.abs(latLng.lat - firstResult.latitude) < 0.001 && 
            Math.abs(latLng.lng - firstResult.longitude) < 0.001) {
            layer.openPopup();
        }
    });

    showToast(`${results.length} site(s) trouvé(s)`, 'success');
}

function applyFilters() {
    const regionFilter = document.getElementById('region-filter').value;
    const typeFilter = document.getElementById('type-filter').value;

    filteredSites = siteData.filter(site => {
        let passRegion = !regionFilter || site.region_id == regionFilter;
        let passType = !typeFilter || determineSiteType(site) === typeFilter;
        return passRegion && passType;
    });

    updateMarkers();
    showToast(`${filteredSites.length} site(s) affiché(s)`, 'info');
}

function resetFilters() {
    document.getElementById('region-filter').value = '';
    document.getElementById('type-filter').value = '';
    document.getElementById('site-search').value = '';
    
    filteredSites = siteData;
    updateMarkers();
    
    showToast('Filtres réinitialisés', 'success');
}

// === ACTIONS ===
function locateUser() {
    if (!navigator.geolocation) {
        showToast('Géolocalisation non disponible', 'error');
        return;
    }

    navigator.geolocation.getCurrentPosition(
        position => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            map.setView([lat, lng], 12);
            
            // Supprimer le marqueur précédent
            if (userLocationMarker) {
                map.removeLayer(userLocationMarker);
            }
            
            // Créer le marqueur utilisateur
            const userIcon = L.divIcon({
                className: 'user-marker',
                html: '<div class="user-icon"><i class="fas fa-user"></i></div>',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            });
            
            userLocationMarker = L.marker([lat, lng], { icon: userIcon })
                .bindPopup('Votre position')
                .addTo(map);
            
            showToast('Position trouvée', 'success');
        },
        error => {
            showToast('Impossible de localiser votre position', 'error');
        }
    );
}

function switchLayer() {
    const layers = window.mapLayers;
    
    // Supprimer la couche actuelle proprement
    if (layers[currentLayer]) {
        map.removeLayer(layers[currentLayer]);
    }
    
    // Passer à la suivante avec gestion d'erreur
    if (currentLayer === 'osm') {
        currentLayer = 'swisstopo';
        showToast('Vue Swiss Topo activée', 'info');
    } else if (currentLayer === 'swisstopo') {
        currentLayer = 'satellite';
        showToast('Vue satellite activée', 'info');
    } else {
        currentLayer = 'osm';
        showToast('Vue OpenStreetMap activée', 'info');
    }
    
    // Ajouter la nouvelle couche avec gestion d'erreur
    try {
        layers[currentLayer].addTo(map);
    } catch (error) {
        console.error('Erreur lors du changement de couche:', error);
        // Revenir à OSM en cas d'erreur
        currentLayer = 'osm';
        layers[currentLayer].addTo(map);
        showToast('Retour à la vue standard', 'warning');
    }
}

function toggleFullscreen() {
    if (!document.fullscreenElement) {
        document.querySelector('.map-interface').requestFullscreen();
    } else {
        document.exitFullscreen();
    }
}

function centerOnSwitzerland() {
    map.setView(MapConfig.center, MapConfig.zoom);
}

// === MODALS ET PANELS ===
function showSiteInfo(site) {
    const panel = document.getElementById('info-panel');
    const title = document.getElementById('info-title');
    const content = document.getElementById('info-content');
    
    title.textContent = site.name;
    content.innerHTML = `
        <div class="site-info">
            <div class="info-section">
                <h4>Informations générales</h4>
                <p><strong>Région:</strong> ${site.region_name || 'Non spécifiée'}</p>
                <p><strong>Secteurs:</strong> ${site.sector_count || 0}</p>
                <p><strong>Voies:</strong> ${site.route_count || 0}</p>
                ${site.approach_time ? `<p><strong>Approche:</strong> ${site.approach_time} min</p>` : ''}
            </div>
            ${site.description ? `
            <div class="info-section">
                <h4>Description</h4>
                <p>${site.description}</p>
            </div>` : ''}
            <div class="info-actions">
                <button onclick="showSiteDetails(${site.id})" class="btn-primary">
                    <i class="fas fa-external-link-alt"></i> Page complète
                </button>
                <button onclick="getDirections(${site.latitude}, ${site.longitude})" class="btn-secondary">
                    <i class="fas fa-directions"></i> Itinéraire
                </button>
            </div>
        </div>
    `;
    
    panel.classList.add('active');
}

function closeInfoPanel() {
    document.getElementById('info-panel').classList.remove('active');
}

function showSiteDetails(siteId) {
    const site = siteData.find(s => s.id == siteId);
    if (!site) return;
    
    document.getElementById('modal-title').textContent = site.name;
    document.getElementById('modal-body').innerHTML = `
        <div class="site-details">
            <div class="detail-section">
                <h4><i class="fas fa-info-circle"></i> Informations</h4>
                <div class="detail-grid">
                    <div class="detail-item">
                        <label>Région:</label>
                        <span>${site.region_name || 'Non spécifiée'}</span>
                    </div>
                    <div class="detail-item">
                        <label>Secteurs:</label>
                        <span>${site.sector_count || 0}</span>
                    </div>
                    <div class="detail-item">
                        <label>Voies:</label>
                        <span>${site.route_count || 0}</span>
                    </div>
                    ${site.approach_time ? `
                    <div class="detail-item">
                        <label>Approche:</label>
                        <span>${site.approach_time} min</span>
                    </div>` : ''}
                </div>
            </div>
            
            ${site.description ? `
            <div class="detail-section">
                <h4><i class="fas fa-align-left"></i> Description</h4>
                <p>${site.description}</p>
            </div>` : ''}
            
            <div class="detail-section">
                <h4><i class="fas fa-map-marker-alt"></i> Localisation</h4>
                <p>Latitude: ${site.latitude}</p>
                <p>Longitude: ${site.longitude}</p>
            </div>
            
            <div class="detail-actions">
                <a href="${site.url}" class="btn-primary">
                    <i class="fas fa-external-link-alt"></i> Page complète
                </a>
                <button onclick="getDirections(${site.latitude}, ${site.longitude})" class="btn-secondary">
                    <i class="fas fa-directions"></i> Itinéraire GPS
                </button>
            </div>
        </div>
    `;
    
    document.getElementById('site-modal').classList.add('active');
}

function closeModal() {
    document.getElementById('site-modal').classList.remove('active');
}

function getDirections(lat, lng) {
    const url = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`;
    window.open(url, '_blank');
}

// === NOTIFICATIONS ===
function showToast(message, type = 'info') {
    const container = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    const icons = {
        info: 'fas fa-info-circle',
        success: 'fas fa-check-circle',
        warning: 'fas fa-exclamation-triangle',
        error: 'fas fa-times-circle'
    };
    
    toast.innerHTML = `
        <i class="${icons[type] || icons.info}"></i>
        <span>${message}</span>
    `;
    
    container.appendChild(toast);
    
    // Animation d'entrée
    setTimeout(() => toast.classList.add('show'), 100);
    
    // Suppression automatique
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => container.removeChild(toast), 300);
    }, 3000);
}

// === UTILITAIRES ===
function hideLoading() {
    const loading = document.getElementById('loading-indicator');
    if (loading) {
        loading.style.display = 'none';
    }
}

// Optimisation responsive
window.addEventListener('resize', () => {
    if (map) {
        setTimeout(() => map.invalidateSize(), 100);
    }
});

// Gestion des erreurs
window.addEventListener('error', (e) => {
    console.error('Erreur carte:', e.error);
    showToast('Une erreur est survenue', 'error');
});
</script>
{% endblock %}