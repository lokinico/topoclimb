<?php
/**
 * Script de configuration sp√©cifique pour Plesk
 * √Ä ex√©cuter apr√®s le d√©ploiement pour v√©rifier l'environnement
 */

echo "üîß Configuration TopoclimbCH pour Plesk\n";
echo "======================================\n\n";

// 1. V√©rifier la version PHP
echo "1. V√©rification PHP...\n";
echo "Version PHP : " . PHP_VERSION . "\n";
if (version_compare(PHP_VERSION, '8.0', '>=')) {
    echo "‚úÖ Version PHP compatible\n";
} else {
    echo "‚ùå Version PHP trop ancienne (8.0+ requis)\n";
}

// 2. V√©rifier les extensions PHP
echo "\n2. V√©rification des extensions PHP...\n";
$requiredExtensions = ['pdo', 'pdo_mysql', 'json', 'mbstring', 'curl', 'zip', 'gd', 'intl'];
$missingExtensions = [];

foreach ($requiredExtensions as $ext) {
    if (extension_loaded($ext)) {
        echo "‚úÖ Extension $ext charg√©e\n";
    } else {
        echo "‚ùå Extension $ext manquante\n";
        $missingExtensions[] = $ext;
    }
}

// 3. V√©rifier les permissions
echo "\n3. V√©rification des permissions...\n";
$directories = ['storage', 'storage/logs', 'storage/cache', 'storage/sessions'];
foreach ($directories as $dir) {
    if (is_dir($dir)) {
        if (is_writable($dir)) {
            echo "‚úÖ R√©pertoire $dir accessible en √©criture\n";
        } else {
            echo "‚ùå R√©pertoire $dir non accessible en √©criture\n";
        }
    } else {
        echo "‚ö†Ô∏è  R√©pertoire $dir n'existe pas\n";
    }
}

// 4. V√©rifier les fichiers critiques
echo "\n4. V√©rification des fichiers critiques...\n";
$criticalFiles = [
    'resources/views/checklists/index.twig',
    'resources/views/equipment/index.twig',
    'resources/views/map/index.twig',
    'public/css/pages/map.css',
    'src/Controllers/ChecklistController.php',
    'src/Controllers/EquipmentController.php'
];

foreach ($criticalFiles as $file) {
    if (file_exists($file)) {
        echo "‚úÖ Fichier $file trouv√©\n";
    } else {
        echo "‚ùå Fichier $file manquant\n";
    }
}

// 5. V√©rifier la configuration .env
echo "\n5. V√©rification de la configuration...\n";
if (file_exists('.env')) {
    echo "‚úÖ Fichier .env trouv√©\n";
} else {
    echo "‚ùå Fichier .env manquant (copiez .env.example)\n";
}

// 6. Test de connexion √† la base de donn√©es (si .env existe)
if (file_exists('.env')) {
    echo "\n6. Test de connexion √† la base de donn√©es...\n";
    
    // Lire le fichier .env
    $envContent = file_get_contents('.env');
    if ($envContent) {
        echo "‚ÑπÔ∏è  Fichier .env lu avec succ√®s\n";
        echo "‚ö†Ô∏è  V√©rifiez manuellement la connexion √† la base de donn√©es\n";
    }
}

// 7. Recommandations
echo "\n7. Recommandations pour Plesk...\n";
echo "‚úÖ Configurez le document root vers le dossier public/\n";
echo "‚úÖ Activez mod_rewrite pour Apache\n";
echo "‚úÖ D√©finissez les variables d'environnement dans .env\n";
echo "‚úÖ Configurez un certificat SSL\n";
echo "‚úÖ Activez la compression gzip\n";

// 8. R√©sum√©
echo "\nüìä R√©sum√© de la configuration :\n";
echo "==============================\n";
echo "PHP Version : " . PHP_VERSION . "\n";
echo "Extensions manquantes : " . (empty($missingExtensions) ? 'Aucune' : implode(', ', $missingExtensions)) . "\n";
echo "Statut : " . (empty($missingExtensions) ? '‚úÖ Pr√™t' : '‚ùå Configuration requise') . "\n";

echo "\nüöÄ Prochaines √©tapes :\n";
echo "1. Corrigez les probl√®mes signal√©s ci-dessus\n";
echo "2. Configurez .env avec vos param√®tres de base de donn√©es\n";
echo "3. Testez les routes : /checklists, /equipment, /map\n";
echo "4. Ex√©cutez php test_deployment.php pour validation compl√®te\n";
echo "\n‚úÖ Configuration termin√©e !\n";