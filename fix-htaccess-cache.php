<?php
/**
 * SOLUTION D√âFINITIVE - Supprimer les r√®gles de cache .htaccess
 * et restaurer un syst√®me de cache contr√¥l√© par l'application
 */

echo "üîß CORRECTION D√âFINITIVE .htaccess - SUPPRESSION R√àGLES CACHE\n";
echo "==========================================================\n";
echo "Date: " . date('Y-m-d H:i:s') . "\n";
echo "Objectif: Supprimer r√®gles cache .htaccess et permettre vidage propre\n\n";

$actions = [];
$errors = [];

try {
    // 1. RESTAURER le .htaccess racine propre (supprimer bricolage temporaire)
    echo "1. RESTAURATION .htaccess racine propre...\n";
    
    $backupFile = __DIR__ . '/.htaccess.backup-20250722-130346';
    $htaccessRoot = __DIR__ . '/.htaccess';
    
    if (file_exists($backupFile)) {
        // Utiliser le backup mais SANS les r√®gles de cache
        $originalContent = file_get_contents($backupFile);
        
        // Supprimer la section mod_expires (lignes 38-49)
        $cleanContent = preg_replace(
            '/# Mise en cache des ressources statiques.*?<\/IfModule>/s',
            '# Cache d√©sactiv√© pour permettre vidage propre par application',
            $originalContent
        );
        
        // V√©rifier que la suppression a fonctionn√©
        if (strpos($cleanContent, 'ExpiresActive') === false) {
            file_put_contents($htaccessRoot, $cleanContent);
            echo "   ‚úÖ .htaccess racine restaur√© SANS r√®gles de cache\n";
            $actions[] = ".htaccess racine nettoy√© (mod_expires supprim√©)";
        } else {
            throw new Exception("√âchec suppression r√®gles cache du .htaccess racine");
        }
    } else {
        throw new Exception("Backup .htaccess introuvable: $backupFile");
    }

    // 2. NETTOYER le public/.htaccess des r√®gles de cache m√©dia
    echo "\n2. NETTOYAGE public/.htaccess...\n";
    
    $publicHtaccess = __DIR__ . '/public/.htaccess';
    $publicBackup = __DIR__ . '/public/.htaccess.backup-' . date('Ymd-His');
    
    if (file_exists($publicHtaccess)) {
        $publicContent = file_get_contents($publicHtaccess);
        
        // Backup du fichier original
        file_put_contents($publicBackup, $publicContent);
        echo "   ‚úÖ Backup public/.htaccess: " . basename($publicBackup) . "\n";
        
        // Supprimer les headers de cache des m√©dias (lignes 24-32)
        $cleanPublicContent = preg_replace(
            '/# Headers pour les fichiers m√©dia.*?<\/FilesMatch>/s',
            '# Headers m√©dia cache d√©sactiv√©s pour permettre vidage application',
            $publicContent
        );
        
        // V√©rifier la suppression
        if (strpos($cleanPublicContent, 'max-age=31536000') === false) {
            file_put_contents($publicHtaccess, $cleanPublicContent);
            echo "   ‚úÖ public/.htaccess nettoy√© SANS r√®gles cache m√©dia\n";
            $actions[] = "public/.htaccess nettoy√© (headers cache m√©dia supprim√©s)";
        } else {
            throw new Exception("√âchec suppression r√®gles cache m√©dia");
        }
    } else {
        throw new Exception("public/.htaccess introuvable");
    }

    // 3. CR√âER script de vidage cache propre
    echo "\n3. CR√âATION script vidage cache application...\n";
    
    $clearCacheScript = __DIR__ . '/clear-cache-clean.php';
    $clearCacheContent = '<?php
/**
 * VIDAGE CACHE PROPRE - Sans interf√©rence .htaccess
 * √Ä utiliser maintenant que les r√®gles cache .htaccess sont supprim√©es
 */

echo "üßπ VIDAGE CACHE APPLICATION PROPRE\\n";
echo "===================================\\n";
echo "Date: " . date("Y-m-d H:i:s") . "\\n\\n";

$cleaned = 0;
$errors = 0;

// 1. Cache Twig complet
if (is_dir(__DIR__ . "/storage/cache")) {
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator(__DIR__ . "/storage/cache", RecursiveDirectoryIterator::SKIP_DOTS),
        RecursiveIteratorIterator::CHILD_FIRST
    );
    
    foreach ($iterator as $file) {
        try {
            if ($file->isDir()) {
                if (rmdir($file->getRealPath())) $cleaned++;
            } else {
                if (unlink($file->getRealPath())) $cleaned++;
            }
        } catch (Exception $e) {
            $errors++;
        }
    }
    echo "‚úÖ Cache Twig: $cleaned √©l√©ments supprim√©s\\n";
}

// 2. Sessions anciennes
if (is_dir(__DIR__ . "/storage/sessions")) {
    $sessions = glob(__DIR__ . "/storage/sessions/sess_*");
    $oldSessions = 0;
    foreach ($sessions as $session) {
        if (filemtime($session) < time() - 3600) { // 1h
            unlink($session);
            $oldSessions++;
        }
    }
    echo "‚úÖ Sessions anciennes: $oldSessions supprim√©es\\n";
}

// 3. OPCache
if (function_exists("opcache_reset")) {
    if (opcache_reset()) {
        echo "‚úÖ OPCache reset√©\\n";
    } else {
        echo "‚ö†Ô∏è √âchec OPCache (non critique)\\n";
    }
}

// 4. Headers application pour forcer refresh
if (!headers_sent()) {
    header("Cache-Control: no-cache, no-store, must-revalidate");
    header("Pragma: no-cache");
    header("Expires: 0");
}

echo "\\nüéØ VIDAGE TERMIN√â\\n";
echo "Cache application: $cleaned √©l√©ments\\n";
echo "Erreurs: $errors\\n";
echo "\\nMAINTENANT LES ROUTES PEUVENT SE RAFRA√éCHIR NORMALEMENT\\n";
echo "Test: /map devrait afficher la nouvelle version\\n";
?>';
    
    file_put_contents($clearCacheScript, $clearCacheContent);
    echo "   ‚úÖ Script vidage propre cr√©√©: clear-cache-clean.php\n";
    $actions[] = "Script clear-cache-clean.php cr√©√©";

    // 4. SUPPRIMER les fichiers de contournement temporaire
    echo "\n4. SUPPRESSION fichiers temporaires...\n";
    
    $tempFiles = [
        __DIR__ . '/public/map-temp.php',
        __DIR__ . '/public/cache-notice.php'
    ];
    
    foreach ($tempFiles as $tempFile) {
        if (file_exists($tempFile)) {
            unlink($tempFile);
            echo "   ‚úÖ Supprim√©: " . basename($tempFile) . "\n";
            $actions[] = "Fichier temporaire supprim√©: " . basename($tempFile);
        }
    }

    // 5. TESTER imm√©diatement le vidage
    echo "\n5. TEST vidage imm√©diat...\n";
    
    // Vider cache Twig
    $cacheDir = __DIR__ . '/storage/cache';
    if (is_dir($cacheDir)) {
        $files = glob($cacheDir . '/*');
        foreach ($files as $file) {
            if (is_file($file)) unlink($file);
        }
        echo "   ‚úÖ Cache Twig vid√© imm√©diatement\n";
    }
    
    // Reset OPCache
    if (function_exists('opcache_reset')) {
        opcache_reset();
        echo "   ‚úÖ OPCache reset imm√©diatement\n";
    }
    
    $actions[] = "Cache vid√© imm√©diatement";

} catch (Exception $e) {
    $errors[] = "Erreur: " . $e->getMessage();
    echo "‚ùå ERREUR: " . $e->getMessage() . "\n";
}

// RAPPORT FINAL
echo "\nüéØ R√âSUM√â CORRECTION D√âFINITIVE\n";
echo "===============================\n";
echo "Actions r√©ussies: " . count($actions) . "\n";
echo "Erreurs: " . count($errors) . "\n\n";

if (!empty($actions)) {
    echo "‚úÖ CORRECTIONS APPLIQU√âES:\n";
    foreach ($actions as $i => $action) {
        echo "   " . ($i + 1) . ". $action\n";
    }
    echo "\n";
}

if (!empty($errors)) {
    echo "‚ùå ERREURS:\n";
    foreach ($errors as $error) {
        echo "   ‚Ä¢ $error\n";
    }
    echo "\n";
}

echo "üöÄ INSTRUCTIONS POST-CORRECTION:\n";
echo "================================\n";
echo "1. üì§ Uploader les .htaccess modifi√©s sur Plesk\n";
echo "2. üßπ Ex√©cuter: php clear-cache-clean.php\n";
echo "3. üéØ Tester: /map (doit afficher la version Twig normale)\n";
echo "4. ‚úÖ √Ä l'avenir: utiliser clear-cache-clean.php pour vider cache\n\n";

echo "üí° AVANTAGES de cette solution:\n";
echo "‚Ä¢ Cache contr√¥l√© par application (plus de conflits .htaccess)\n";
echo "‚Ä¢ Vidage cache fiable et pr√©visible\n";
echo "‚Ä¢ Performance pr√©serv√©e pour assets statiques seulement\n";
echo "‚Ä¢ Route /map utilise maintenant le syst√®me MVC normal\n\n";

$success = count($errors) === 0;
echo ($success ? "üéâ CORRECTION D√âFINITIVE R√âUSSIE" : "‚ö†Ô∏è CORRECTION AVEC ERREURS") . "\n";

exit($success ? 0 : 1);
?>