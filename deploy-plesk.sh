#!/bin/bash

# Script de pr√©paration pour d√©ploiement Plesk TopoclimbCH
# Mis √† jour avec les derni√®res corrections (routes critiques r√©par√©es)
echo "üöÄ Pr√©paration du d√©ploiement TopoclimbCH pour Plesk"
echo "=================================================="
echo "Commit: $(git rev-parse --short HEAD)"
echo "Date: $(date)"
echo ""

# Cr√©er un r√©pertoire de d√©ploiement
DEPLOY_DIR="topoclimb-deploy-$(date +%Y%m%d_%H%M%S)"
mkdir -p $DEPLOY_DIR

echo "üì¶ Copie des fichiers n√©cessaires..."

# V√©rifier les fichiers critiques r√©par√©s
echo "üîç V√©rification des corrections r√©centes..."
if [ -f "resources/views/checklists/index.twig" ]; then
    echo "‚úÖ Template checklists trouv√©"
else
    echo "‚ùå Template checklists manquant"
    exit 1
fi

if [ -f "resources/views/equipment/index.twig" ]; then
    echo "‚úÖ Template equipment trouv√©"
else
    echo "‚ùå Template equipment manquant"
    exit 1
fi

if [ -f "resources/views/map/index.twig" ]; then
    echo "‚úÖ Template map trouv√©"
else
    echo "‚ùå Template map manquant"
    exit 1
fi

if [ -f "public/css/pages/map.css" ]; then
    echo "‚úÖ CSS carte trouv√©"
else
    echo "‚ùå CSS carte manquant"
    exit 1
fi

echo "‚úÖ Tous les fichiers critiques sont pr√©sents"
echo ""

# Copier les fichiers essentiels (exclure les fichiers de d√©veloppement)
cp -r public/ $DEPLOY_DIR/
cp -r src/ $DEPLOY_DIR/
cp -r resources/ $DEPLOY_DIR/
cp -r config/ $DEPLOY_DIR/
cp -r vendor/ $DEPLOY_DIR/
cp -r storage/ $DEPLOY_DIR/

# Copier les fichiers de configuration
cp composer.json $DEPLOY_DIR/
cp composer.lock $DEPLOY_DIR/
cp bootstrap.php $DEPLOY_DIR/
cp .env.production.example $DEPLOY_DIR/.env.example

# Copier les scripts de test pour validation post-d√©ploiement
cp test_deployment.php $DEPLOY_DIR/
cp DEPLOYMENT_CHECKLIST.md $DEPLOY_DIR/
cp plesk-config.php $DEPLOY_DIR/

# Cr√©er un fichier .htaccess pour Apache (Plesk utilise souvent Apache)
cat > $DEPLOY_DIR/.htaccess << 'EOF'
# Redirection vers le dossier public
RewriteEngine On
RewriteCond %{REQUEST_URI} !^/public/
RewriteRule ^(.*)$ /public/$1 [L,QSA]

# S√©curit√©
<Files ".env">
    Order Allow,Deny
    Deny from all
</Files>

<Files "composer.json">
    Order Allow,Deny
    Deny from all
</Files>

<Files "composer.lock">
    Order Allow,Deny
    Deny from all
</Files>
EOF

# Cr√©er un .htaccess sp√©cifique pour le dossier public
cat > $DEPLOY_DIR/public/.htaccess << 'EOF'
# R√©√©criture pour le routage
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php [QSA,L]

# S√©curit√©
<Files ".env">
    Order Allow,Deny
    Deny from all
</Files>

# Headers de s√©curit√©
<IfModule mod_headers.c>
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-Content-Type-Options "nosniff"
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
</IfModule>

# Gestion du cache des assets
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/webp "access plus 1 month"
</IfModule>
EOF

# Cr√©er les r√©pertoires de logs et cache
mkdir -p $DEPLOY_DIR/storage/logs
mkdir -p $DEPLOY_DIR/storage/cache
mkdir -p $DEPLOY_DIR/storage/sessions

# NOUVEAU: Nettoyage cache et optimisations
echo "üßπ Nettoyage et optimisations..."

# Vider le cache local avant d√©ploiement
if [ -d "storage/cache" ]; then
    rm -rf storage/cache/*
    echo "‚úÖ Cache local vid√©"
fi

# Cr√©er script de vidage cache pour production
cat > $DEPLOY_DIR/clear-cache.php << 'EOF'
<?php
/**
 * Script de vidage du cache TopoclimbCH
 * √Ä ex√©cuter apr√®s chaque d√©ploiement
 */

echo "üßπ NETTOYAGE CACHE TopoclimbCH\n";
echo "================================\n";

// Vider le cache des vues Twig
$cacheDir = __DIR__ . '/storage/cache';
if (is_dir($cacheDir)) {
    $files = glob($cacheDir . '/*');
    foreach ($files as $file) {
        if (is_file($file)) {
            unlink($file);
        }
    }
    echo "‚úÖ Cache Twig vid√©\n";
} else {
    echo "‚ÑπÔ∏è R√©pertoire cache introuvable\n";
}

// Vider le cache des sessions
$sessionDir = __DIR__ . '/storage/sessions';
if (is_dir($sessionDir)) {
    $files = glob($sessionDir . '/sess_*');
    foreach ($files as $file) {
        if (is_file($file)) {
            unlink($file);
        }
    }
    echo "‚úÖ Sessions vid√©es\n";
}

// Vider les logs anciens (> 7 jours)
$logDir = __DIR__ . '/storage/logs';
if (is_dir($logDir)) {
    $files = glob($logDir . '/*.log');
    $deleted = 0;
    foreach ($files as $file) {
        if (is_file($file) && filemtime($file) < time() - (7 * 24 * 60 * 60)) {
            unlink($file);
            $deleted++;
        }
    }
    if ($deleted > 0) {
        echo "‚úÖ $deleted anciens logs supprim√©s\n";
    }
}

// Vider le cache navigateur (headers)
if (function_exists('opcache_reset')) {
    opcache_reset();
    echo "‚úÖ OPCache PHP vid√©\n";
}

echo "\nüéØ CACHE COMPL√àTEMENT VID√â !\n";
echo "Testez maintenant votre site.\n";
EOF

# Cr√©er script de diagnostic CSS/JS
cat > $DEPLOY_DIR/diagnose-conflicts.php << 'EOF'
<?php
/**
 * Diagnostic des conflits CSS/JS TopoclimbCH
 * Pour identifier les probl√®mes comme celui de la carte
 */

echo "üîç DIAGNOSTIC CONFLITS TopoclimbCH\n";
echo "===================================\n";

// V√©rifier les fichiers CSS critiques
$criticalFiles = [
    'public/css/app.css' => 'CSS principal',
    'public/css/pages/map.css' => 'CSS carte (ancien)',
    'public/css/pages/map-clean.css' => 'CSS carte (nouveau)',
    'public/test-carte.html' => 'Page test carte',
    'resources/views/layouts/app.twig' => 'Template principal',
    'resources/views/map/index.twig' => 'Template carte'
];

$issues = [];

foreach ($criticalFiles as $file => $desc) {
    if (!file_exists(__DIR__ . '/' . $file)) {
        $issues[] = "‚ùå MANQUANT: $desc ($file)";
    } else {
        echo "‚úÖ $desc\n";
    }
}

// V√©rifier les CDN externes
echo "\nüåê Test des CDN externes:\n";
$cdns = [
    'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css',
    'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js',
    'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css'
];

foreach ($cdns as $cdn) {
    $headers = @get_headers($cdn);
    if ($headers && strpos($headers[0], '200') !== false) {
        echo "‚úÖ CDN accessible: " . basename($cdn) . "\n";
    } else {
        $issues[] = "‚ùå CDN inaccessible: $cdn";
    }
}

// R√©sum√©
echo "\nüìä R√âSUM√â:\n";
if (empty($issues)) {
    echo "‚úÖ Aucun probl√®me d√©tect√©\n";
} else {
    echo "‚ö†Ô∏è " . count($issues) . " probl√®me(s) trouv√©(s):\n";
    foreach ($issues as $issue) {
        echo "   $issue\n";
    }
}

echo "\nüí° Si la carte ne fonctionne pas:\n";
echo "   1. Ex√©cutez: php clear-cache.php\n";
echo "   2. Testez /test-carte.html d'abord\n";
echo "   3. Puis testez /map\n";
echo "   4. Consultez les logs du navigateur (F12)\n";
EOF

# Configurer les permissions
chmod -R 755 $DEPLOY_DIR/public/
chmod -R 755 $DEPLOY_DIR/resources/
chmod -R 755 $DEPLOY_DIR/src/
chmod -R 755 $DEPLOY_DIR/storage/
chmod -R 777 $DEPLOY_DIR/storage/logs/
chmod -R 777 $DEPLOY_DIR/storage/cache/
chmod -R 777 $DEPLOY_DIR/storage/sessions/

# Cr√©er un fichier de configuration pour Plesk
cat > $DEPLOY_DIR/PLESK_DEPLOYMENT.md << 'EOF'
# Instructions de d√©ploiement Plesk TopoclimbCH

## üöÄ Corrections incluses dans cette version
- ‚úÖ Routes /checklists et /equipment r√©par√©es (erreur 500 ‚Üí 200)
- ‚úÖ Carte interactive ENTI√àREMENT r√©par√©e (√©tait compl√®tement bugg√©e)
- ‚úÖ Solution bypass pour conflits CSS/Bootstrap avec Leaflet
- ‚úÖ Page test-carte.html incluse pour diagnostic
- ‚úÖ Scripts de nettoyage cache (clear-cache.php)
- ‚úÖ Script diagnostic conflits (diagnose-conflicts.php)
- ‚úÖ Templates Twig corrig√©s (layouts/app.twig)
- ‚úÖ Contr√¥leurs avec injection de d√©pendances fixes

## 1. Upload des fichiers
- Uploadez tout le contenu de ce dossier vers la racine de votre domaine sur Plesk
- Ou utilisez le gestionnaire de fichiers Plesk
- **Important**: Assurez-vous que le dossier public/ est accessible via HTTP

## 2. Configuration PHP
Dans Plesk, allez dans PHP Settings et assurez-vous que :
- Version PHP : 8.0 ou sup√©rieur
- Extensions activ√©es : pdo, pdo_mysql, json, mbstring, curl, zip, gd, intl
- Memory limit : 512M minimum
- Max execution time : 60 secondes

## 3. Configuration .env
- Copiez .env.example vers .env
- Modifiez les variables selon votre configuration :
  - APP_URL=https://votre-domaine.com
  - DB_HOST=localhost
  - DB_NAME=votre_base_de_donn√©es
  - DB_USER=votre_utilisateur
  - DB_PASSWORD=votre_mot_de_passe

## 4. Base de donn√©es
- Cr√©ez une base de donn√©es MySQL dans Plesk
- Importez le schema SQL si n√©cessaire
- Utilisez l'encoding UTF8_GENERAL_CI

## 5. Composer (si disponible)
Si Composer est disponible sur votre serveur :
```bash
composer install --no-dev --optimize-autoloader
```

## 6. Permissions
Assurez-vous que les dossiers storage/ sont en √©criture (777) :
```bash
chmod -R 777 storage/
```

## 7. OBLIGATOIRE: Nettoyage cache apr√®s d√©ploiement
**‚ö†Ô∏è IMPORTANT**: Ex√©cutez TOUJOURS apr√®s chaque upload :
```bash
php clear-cache.php
```
Ceci vide :
- Cache Twig (templates)
- Sessions utilisateur  
- OPCache PHP
- Anciens logs

## 8. Test des routes critiques
Testez dans cet ordre :
1. **https://votre-domaine.com/test-carte.html** (doit marcher parfaitement)
2. **https://votre-domaine.com/map** (doit √™tre identique au test)
3. **https://votre-domaine.com/checklists** (doit afficher "Checklists")
4. **https://votre-domaine.com/equipment** (doit afficher "√âquipement")

## 9. Diagnostic en cas de probl√®me
Si la carte ne fonctionne pas :
```bash
php diagnose-conflicts.php
```
Ce script v√©rifie :
- Fichiers CSS/JS pr√©sents
- CDN accessibles (Leaflet, Bootstrap)
- Conflits potentiels

## 8. Script de test automatique
Modifiez l'URL dans test_deployment.php puis ex√©cutez :
```bash
php test_deployment.php
```

## 9. Surveillance
- V√©rifiez les logs d'erreur Plesk
- Surveillez les performances (< 2s par page)
- Testez la carte interactive sur mobile

## üêõ D√©pannage
- Si erreur 500 : v√©rifiez les permissions et les logs PHP
- Si carte ne s'affiche pas : v√©rifiez la console JavaScript
- Si templates manquants : v√©rifiez resources/views/

## üìû Support
Consultez DEPLOYMENT_CHECKLIST.md pour plus de d√©tails
EOF

# Cr√©er une archive
echo "üì¶ Cr√©ation de l'archive de d√©ploiement..."
tar -czf "$DEPLOY_DIR.tar.gz" $DEPLOY_DIR/

echo ""
echo "‚úÖ D√©ploiement TopoclimbCH pr√©par√© avec succ√®s !"
echo "============================================="
echo ""
echo "üìä R√©sum√© des corrections incluses :"
echo "‚úÖ Routes /checklists et /equipment r√©par√©es"
echo "‚úÖ Carte interactive avec tuiles simplifi√©es"
echo "‚úÖ Templates Twig corrig√©s"
echo "‚úÖ Contr√¥leurs avec injection de d√©pendances"
echo "‚úÖ Scripts de test inclus"
echo ""
echo "üìÅ Dossier cr√©√© : $DEPLOY_DIR/"
echo "üì¶ Archive cr√©√©e : $DEPLOY_DIR.tar.gz"
echo "üìã Instructions : $DEPLOY_DIR/PLESK_DEPLOYMENT.md"
echo ""
echo "üöÄ Prochaines √©tapes :"
echo "1. T√©l√©chargez l'archive : $DEPLOY_DIR.tar.gz"
echo "2. Uploadez et extractez sur votre serveur Plesk"
echo "3. Suivez les instructions dans PLESK_DEPLOYMENT.md"
echo "4. Testez les routes critiques :"
echo "   - /checklists"
echo "   - /equipment"
echo "   - /map"
echo ""
echo "üß™ Pour tester apr√®s d√©ploiement :"
echo "   php test_deployment.php"
echo ""
echo "üí° Support : consultez DEPLOYMENT_CHECKLIST.md"